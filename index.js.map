{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@hypercubejs/hypercubejs/webpack/bootstrap","webpack://@hypercubejs/hypercubejs/webpack/runtime/global","webpack://@hypercubejs/hypercubejs/webpack/runtime/publicPath","webpack://@hypercubejs/hypercubejs/./engine/sources/core/aabb.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/collision.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/camera.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/matrix4.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/constants.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/defaults.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/engine.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/fog.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/loop.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/material.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/quaternion.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/vector3.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/mesh.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/node.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/scene.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/script.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/shader.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/skybox.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/state.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/system.js","webpack://@hypercubejs/hypercubejs/./engine/sources/cameras/orthographic.js","webpack://@hypercubejs/hypercubejs/./engine/sources/cameras/perspective.js","webpack://@hypercubejs/hypercubejs/./engine/sources/devices/viewer.js","webpack://@hypercubejs/hypercubejs/./engine/sources/lights/ambiant.js","webpack://@hypercubejs/hypercubejs/./engine/sources/lights/directional.js","webpack://@hypercubejs/hypercubejs/./engine/sources/materials/color.js","webpack://@hypercubejs/hypercubejs/./engine/sources/meshes/box.js","webpack://@hypercubejs/hypercubejs/./engine/sources/meshes/icosahedron.js","webpack://@hypercubejs/hypercubejs/./engine/sources/meshes/plane.js","webpack://@hypercubejs/hypercubejs/./engine/sources/shaders/shaderdepth.js","webpack://@hypercubejs/hypercubejs/./engine/sources/shaders/shaderscene.js","webpack://@hypercubejs/hypercubejs/./engine/sources/systems/collisionaabb.js","webpack://@hypercubejs/hypercubejs/./engine/sources/systems/input.js","webpack://@hypercubejs/hypercubejs/./engine/sources/systems/render.js","webpack://@hypercubejs/hypercubejs/./engine/sources/systems/script.js","webpack://@hypercubejs/hypercubejs/./engine/sources/systems/spatialization.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/states/game.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/brick1x1x1/brick1x1x1.script.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/brick1x1x1/brick1x1x1.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/brick1x1x1traversable/brick1x1x1traversable.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/brick2x2x2/brick2x2x2.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/plane4x4/plane4x4.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/plane16x16/plane16x16.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/plane32x32/plane32x32.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/plane1080x1080/plane1080x1080.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/states/nodeplayer.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/soundambiant/soundambiant.script.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/soundambiant/Aperture-Tag-OST-28-Central-Hub-_152kbit_Opus_.mp3","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/soundambiant/soundambiant.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/states/player.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/player/player.script.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/pick.mp3","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coremountain/coremountain.script.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coremountain/mountain.mp3","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coremountain/coremountain.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coretemple/coretemple.script.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coretemple/temple.mp3","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coretemple/coretemple.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coretree/coretree.script.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coretree/tree.mp3","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coretree/coretree.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coreend/coreend.script.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/ambiant.mp3","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/coreend/coreend.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/core/game.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/camera/camera.js","webpack://@hypercubejs/hypercubejs/./ld53/sources/gameobjects/player/player.js","webpack://@hypercubejs/hypercubejs/./ld53/index.js","webpack://@hypercubejs/hypercubejs/webpack/startup"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","/**\n * Creates Hypercube.js AABBs.\n * @example\n * const aabb = new AABB(vectormin, vectormax);\n */\nclass AABB {\n\n    /**\n     * Stores the position of the AABB.\n     * @type {vector3}\n     * @private\n     */\n    $translation;\n\n    /**\n     * Stores the maximum x value of the AABB.\n     * @type {number}\n     * @private\n     */\n    $xmax;\n\n    /**\n     * Stores the minimum x value of the AABB.\n     * @type {number}\n     * @private\n     */\n    $xmin;\n\n    /**\n     * Stores the maximum y value of the AABB.\n     * @type {number}\n     * @private\n     */\n    $ymax;\n\n    /**\n     * Stores the minimum y value of the AABB.\n     * @type {number}\n     * @private\n     */\n    $ymin;\n\n    /**\n     * Stores the maximum z value of the AABB.\n     * @type {number}\n     * @private\n     */\n    $zmax;\n\n    /**\n     * Stores the minimum z value of the AABB.\n     * @type {number}\n     * @private\n     */\n    $zmin;\n\n    /**\n     * Gets the position of the AABB.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get translation() {\n\n        return this.$translation;\n    }\n\n    /**\n     * Gets the maximum x value of the AABB.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get xmax() {\n\n        return this.$xmax;\n    }\n\n    /**\n     * Gets the minimum x value of the AABB.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get xmin() {\n\n        return this.$xmin;\n    }\n\n    /**\n     * Gets the maximum y value of the AABB.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get ymax() {\n\n        return this.$ymax;\n    }\n\n    /**\n     * Gets the minimum y value of the AABB.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get ymin() {\n\n        return this.$ymin;\n    }\n\n    /**\n     * Gets the maximum z value of the AABB.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get zmax() {\n\n        return this.$zmax;\n    }\n\n    /**\n     * Gets the minimum z value of the AABB.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get zmin() {\n\n        return this.$zmin;\n    }\n\n    /**\n     * Creates a new Hypercube.js AABB.\n     * @param {vector3} $vectormin The minimum xyz values of the AABB to create.\n     * @param {vector3} $vectormax The maximum xyz values of the AABB to create.\n     */\n    constructor($vectormin, $vectormax) {\n\n        const [xmin, ymin, zmin] = $vectormin;\n        const [xmax, ymax, zmax] = $vectormax;\n\n        this.$xmin = xmin;\n        this.$ymin = ymin;\n        this.$zmin = zmin;\n\n        this.$xmax = xmax;\n        this.$ymax = ymax;\n        this.$zmax = zmax;\n\n        const xtranslation = (this.$xmin + this.$xmax) * 0.5;\n        const ytranslation = (this.$ymin + this.$ymax) * 0.5;\n        const ztranslation = (this.$zmin + this.$zmax) * 0.5;\n\n        this.$translation = [xtranslation, ytranslation, ztranslation];\n    }\n}\n\nexport {\n\n    AABB\n};\n\nexport default AABB;\n","import {AABB, VECTOR3} from '../../index.js';\n\n/**\n * Check if two AABBs collide with each other (if they have a point, a segment, a surface or an area in common).\n * @param {AABB} $a The first AABB to compare.\n * @param {AABB} $b The second AABB to compare.\n * @returns {boolean}\n */\nfunction aabbcollide($a, $b) {\n\n    if ($a.xmax < $b.xmin\n    || $a.ymax < $b.ymin\n    || $a.zmax < $b.zmin\n    || $b.xmax < $a.xmin\n    || $b.ymax < $a.ymin\n    || $b.zmax < $a.zmin) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Check if two AABBs strictly collide with each other (if they have an area in common).\n * @param {AABB} $a The first AABB to compare.\n * @param {AABB} $b The second AABB to compare.\n * @returns {boolean}\n */\nfunction aabbcollidestrict($a, $b) {\n\n    if ($a.xmax <= $b.xmin\n    || $a.ymax <= $b.ymin\n    || $a.zmax <= $b.zmin\n    || $b.xmax <= $a.xmin\n    || $b.ymax <= $a.ymin\n    || $b.zmax <= $a.zmin) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create a new AABB minimum container from two given AABB.\n * @param {AABB} $a The first AABB to contain.\n * @param {AABB} $b The second AABB to contain.\n * @returns {AABB}\n */\nfunction aabbminimumcontainer($a, $b) {\n\n    const xmin = Math.min($a.xmin, $b.xmin);\n    const ymin = Math.min($a.ymin, $b.ymin);\n    const zmin = Math.min($a.zmin, $b.zmin);\n\n    const xmax = Math.max($a.xmax, $b.xmax);\n    const ymax = Math.max($a.ymax, $b.ymax);\n    const zmax = Math.max($a.zmax, $b.zmax);\n\n    const min = VECTOR3.create([xmin, ymin, zmin]);\n    const max = VECTOR3.create([xmax, ymax, zmax]);\n\n    return new AABB(min, max);\n}\n\n/**\n * Check if two AABBs strictly overlap with each other on the x-axis (if they have an area in common).\n * @param {AABB} $a The first AABB to compare.\n * @param {AABB} $b The second AABB to compare.\n * @returns {boolean}\n */\nfunction aabboverlapstrictx($a, $b) {\n\n    if ($a.xmin >= $b.xmax\n    || $a.xmax <= $b.xmin) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Check if two AABBs strictly overlap with each other on the y-axis (if they have an area in common).\n * @param {AABB} $a The first AABB to compare.\n * @param {AABB} $b The second AABB to compare.\n * @returns {boolean}\n */\nfunction aabboverlapstricty($a, $b) {\n\n    if ($a.ymin >= $b.ymax\n    || $a.ymax <= $b.ymin) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Check if two AABBs strictly overlap with each other on the z-axis (if they have an area in common).\n * @param {AABB} $a The first AABB to compare.\n * @param {AABB} $b The second AABB to compare.\n * @returns {boolean}\n */\nfunction aabboverlapstrictz($a, $b) {\n\n    if ($a.zmin >= $b.zmax\n    || $a.zmax <= $b.zmin) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Gets the time ratio of the collision between two AABBs (with continuous detection collision).\n * @param {AABB} $abefore The first AABB at its initial state.\n * @param {AABB} $aafter The first AABB at its final state.\n * @param {AABB} $bbefore The second AABB at its initial state.\n * @param {AABB} $bafter The second AABB at its final state.\n * @returns {number}\n */\nfunction aabbsweptcollision($abefore, $aafter, $bbefore, $bafter) {\n\n    const velocitya = VECTOR3.subtract($aafter.translation, $abefore.translation);\n    const velocityb = VECTOR3.subtract($bafter.translation, $bbefore.translation);\n\n    const [velocityrelativex, velocityrelativey, velocityrelativez] = VECTOR3.subtract(velocitya, velocityb);\n\n    const collidera = $abefore;\n    const colliderb = $bbefore;\n\n    let entrytimex = Number.NEGATIVE_INFINITY;\n    let entrytimey = Number.NEGATIVE_INFINITY;\n    let entrytimez = Number.NEGATIVE_INFINITY;\n\n    let exittimex = Number.POSITIVE_INFINITY;\n    let exittimey = Number.POSITIVE_INFINITY;\n    let exittimez = Number.POSITIVE_INFINITY;\n\n    if (velocityrelativex !== 0) {\n\n        const entryx = (velocityrelativex > 0) ? (colliderb.xmin - collidera.xmax) : (colliderb.xmax - collidera.xmin);\n        const exitx = (velocityrelativex > 0) ? (colliderb.xmax - collidera.xmin) : (colliderb.xmin - collidera.xmax);\n\n        const velocityrelativexinverse = 1 / velocityrelativex;\n\n        entrytimex = entryx * velocityrelativexinverse;\n        exittimex = exitx * velocityrelativexinverse;\n    }\n\n    if (entrytimex < 0 && (collidera.xmax < colliderb.xmin || colliderb.xmax < collidera.xmin)) {\n\n        return 1;\n    }\n\n    if (velocityrelativey !== 0) {\n\n        const entryy = (velocityrelativey > 0) ? (colliderb.ymin - collidera.ymax) : (colliderb.ymax - collidera.ymin);\n        const exity = (velocityrelativey > 0) ? (colliderb.ymax - collidera.ymin) : (colliderb.ymin - collidera.ymax);\n\n        const velocityrelativeyinverse = 1 / velocityrelativey;\n\n        entrytimey = entryy * velocityrelativeyinverse;\n        exittimey = exity * velocityrelativeyinverse;\n    }\n\n    if (entrytimey < 0 && (collidera.ymax < colliderb.ymin || colliderb.ymax < collidera.ymin)) {\n\n        return 1;\n    }\n\n    if (velocityrelativez !== 0) {\n\n        const entryz = (velocityrelativez > 0) ? (colliderb.zmin - collidera.zmax) : (colliderb.zmax - collidera.zmin);\n        const exitz = (velocityrelativez > 0) ? (colliderb.zmax - collidera.zmin) : (colliderb.zmin - collidera.zmax);\n\n        const velocityrelativezinverse = 1 / velocityrelativez;\n\n        entrytimez = entryz * velocityrelativezinverse;\n        exittimez = exitz * velocityrelativezinverse;\n    }\n\n    if (entrytimez < 0 && (collidera.zmax < colliderb.zmin || colliderb.zmax < collidera.zmin)) {\n\n        return 1;\n    }\n\n    if (entrytimex < 0 && entrytimey < 0 && entrytimez < 0) {\n\n        return 1;\n    }\n\n    if (entrytimex > 1\n    || entrytimey > 1\n    || entrytimez > 1) {\n\n        return 1;\n    }\n\n    const entrytime = Math.max(Math.max(entrytimex, entrytimey), entrytimez);\n    const exittime = Math.min(Math.min(exittimex, exittimey), exittimez);\n\n    if (entrytime > exittime) {\n\n        return 1;\n    }\n\n    return entrytime;\n}\n\nexport {\n\n    aabbcollide,\n    aabbcollidestrict,\n    aabbminimumcontainer,\n    aabboverlapstrictx,\n    aabboverlapstricty,\n    aabboverlapstrictz,\n    aabbsweptcollision\n};\n","import {MATRIX4} from '../../index.js';\n\n/**\n * Abstract Hypercube.js camera.\n * @example\n * class CameraExample extends Camera {\n *\n *     get projection() {\n *\n *         // must be implemented\n *     }\n * }\n */\nclass Camera {\n\n    /**\n     * Stores the aspect ratio (width / height).\n     * @type {number}\n     * @protected\n     */\n    $aspect;\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type;\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the projection matrix of the camera.\n     * @type {matrix4}\n     * @public\n     * @readonly\n     */\n    get projection() {\n\n        console.warn('Hypercube.js - Camera - get projection() - NOT IMPLEMENTED');\n\n        return MATRIX4.identity();\n    }\n\n    /**\n     * Gets the type.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get type() {\n\n        return this.$type;\n    };\n\n    /**\n     * Creates a new Hypercube.js camera.\n     * @param {string} [$name] The name of the camera.\n     */\n    constructor($name = 'Camera') {\n\n        this.$name = $name;\n    }\n\n    /**\n     * Sets the aspect ratio.\n     * @param {number} $aspect The aspect ratio (width / height) to set.\n     * @public\n     */\n    setaspect($aspect) {\n\n        this.$aspect = $aspect;\n    }\n}\n\nexport {\n\n    Camera\n};\n\nexport default Camera;\n","import {QUATERNION, VECTOR3} from '../../index.js';\n\n/**\n * Gets a new clone of given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @returns {matrix4}\n */\nfunction clone($matrix) {\n\n    return [...$matrix];\n}\n\n/**\n * Creates a new 4x4 matrix.\n * @param {[number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]} $values The matrix values.\n * @returns {matrix4}\n */\nfunction create($values) {\n\n    return [...$values];\n}\n\n/**\n * Gets a new 4x4 matrix from given reference quaternion.\n * @param {quaternion} $quaternion The reference quaternion.\n * @returns {matrix4}\n */\nfunction fromquaternion($quaternion) {\n\n    const [x, y, z, w] = $quaternion;\n\n    const matrix = identity();\n\n    const xx = x + x;\n    const yy = y + y;\n    const zz = z + z;\n\n    const xxxx = x * xx;\n    const yxyx = y * xx;\n    const yyyy = y * yy;\n    const zxzx = z * xx;\n    const zyzy = z * yy;\n    const zzzz = z * zz;\n    const wxwx = w * xx;\n    const wywy = w * yy;\n    const wzwz = w * zz;\n\n    matrix[0] = 1 - yyyy - zzzz;\n    matrix[1] = yxyx + wzwz;\n    matrix[2] = zxzx - wywy;\n    matrix[3] = 0;\n\n    matrix[4] = yxyx - wzwz;\n    matrix[5] = 1 - xxxx - zzzz;\n    matrix[6] = zyzy + wxwx;\n    matrix[7] = 0;\n\n    matrix[8] = zxzx + wywy;\n    matrix[9] = zyzy - wxwx;\n    matrix[10] = 1 - xxxx - yyyy;\n    matrix[11] = 0;\n\n    matrix[12] = 0;\n    matrix[13] = 0;\n    matrix[14] = 0;\n    matrix[15] = 1;\n\n    return matrix;\n}\n\n/**\n * Gets a new quaternion representing the rotation of given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @returns {quaternion}\n */\nfunction getrotation($matrix) {\n\n    const quaternion = QUATERNION.identity();\n    const scale = getscale($matrix);\n\n    const scaleinverse = VECTOR3.identity();\n\n    scaleinverse[0] = 1 / scale[0];\n    scaleinverse[1] = 1 / scale[1];\n    scaleinverse[2] = 1 / scale[2];\n\n    const aa = $matrix[0] * scaleinverse[0];\n    const ab = $matrix[1] * scaleinverse[1];\n    const ac = $matrix[2] * scaleinverse[2];\n\n    const ba = $matrix[4] * scaleinverse[0];\n    const bb = $matrix[5] * scaleinverse[1];\n    const bc = $matrix[6] * scaleinverse[2];\n\n    const ca = $matrix[8] * scaleinverse[0];\n    const cb = $matrix[9] * scaleinverse[1];\n    const cc = $matrix[10] * scaleinverse[2];\n\n    const trace = aa + bb + cc;\n\n    let root;\n    let rootinverse;\n\n    if (trace > 0) {\n\n        root = Math.sqrt(trace + 1) * 2;\n        rootinverse = 1 / root;\n\n        quaternion[0] = (bc - cb) * rootinverse;\n        quaternion[1] = (ca - ac) * rootinverse;\n        quaternion[2] = (ab - ba) * rootinverse;\n        quaternion[3] = 0.25 * root;\n\n        return quaternion;\n    }\n\n    if (aa > bb && aa > cc) {\n\n        root = Math.sqrt(1 + aa - bb - cc) * 2;\n        rootinverse = 1 / root;\n\n        quaternion[0] = 0.25 * root;\n        quaternion[1] = (ab + ba) * rootinverse;\n        quaternion[2] = (ca + ac) * rootinverse;\n        quaternion[3] = (bc - cb) * rootinverse;\n\n        return quaternion;\n    }\n\n    if (bb > cc) {\n\n        root = Math.sqrt(1 + bb - aa - cc) * 2;\n        rootinverse = 1 / root;\n\n        quaternion[0] = (ab + ba) * rootinverse;\n        quaternion[1] = 0.25 * root;\n        quaternion[2] = (bc + cb) * rootinverse;\n        quaternion[3] = (ca - ac) * rootinverse;\n\n        return quaternion;\n    }\n\n    root = Math.sqrt(1 + cc - aa - bb) * 2;\n    rootinverse = 1 / root;\n\n    quaternion[0] = (ca + ac) * rootinverse;\n    quaternion[1] = (bc + cb) * rootinverse;\n    quaternion[2] = 0.25 * root;\n    quaternion[3] = (ab - ba) * rootinverse;\n\n    return quaternion;\n}\n\n/**\n * Gets a new scale vector from given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @returns {vector3}\n */\nfunction getscale($matrix) {\n\n    const vector = VECTOR3.identity();\n\n    const aa = $matrix[0];\n    const ab = $matrix[1];\n    const ac = $matrix[2];\n\n    const ba = $matrix[4];\n    const bb = $matrix[5];\n    const bc = $matrix[6];\n\n    const ca = $matrix[8];\n    const cb = $matrix[9];\n    const cc = $matrix[10];\n\n    vector[0] = Math.hypot(aa, ab, ac);\n    vector[1] = Math.hypot(ba, bb, bc);\n    vector[2] = Math.hypot(ca, cb, cc);\n\n    return vector;\n}\n\n/**\n * Gets a new translation vector from given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @returns {vector3}\n */\nfunction gettranslation($matrix) {\n\n    const vector = VECTOR3.identity();\n\n    vector[0] = $matrix[12];\n    vector[1] = $matrix[13];\n    vector[2] = $matrix[14];\n\n    return vector;\n}\n\n/**\n * Gets a new 4x4 identity matrix.\n * @returns {matrix4}\n */\nfunction identity() {\n\n    return [\n\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    ];\n}\n\n/**\n * Gets a new 4x4 inverted matrix from given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @returns {matrix4}\n */\nfunction invert($matrix) {\n\n    const [\n\n        aa, ab, ac, ad,\n        ba, bb, bc, bd,\n        ca, cb, cc, cd,\n        da, db, dc, dd\n\n    ] = $matrix;\n\n    const eeff = aa * bb - ab * ba;\n    const eefg = aa * bc - ac * ba;\n    const eefh = aa * bd - ad * ba;\n    const effg = ab * bc - ac * bb;\n    const effh = ab * bd - ad * bb;\n    const egfh = ac * bd - ad * bc;\n\n    const gehf = ca * db - cb * da;\n    const gehg = ca * dc - cc * da;\n    const gehh = ca * dd - cd * da;\n    const gfhg = cb * dc - cc * db;\n    const gfhh = cb * dd - cd * db;\n    const gghh = cc * dd - cd * dc;\n\n    const determinant = eeff * gghh - eefg * gfhh + eefh * gfhg + effg * gehh - effh * gehg + egfh * gehf;\n\n    let matrix = identity();\n\n    if (determinant === 0) {\n\n        return clone(matrix);\n    }\n\n    const determinantinverse = 1 / determinant;\n\n    matrix[0] = (bb * gghh - bc * gfhh + bd * gfhg) * determinantinverse;\n    matrix[1] = (ac * gfhh - ab * gghh - ad * gfhg) * determinantinverse;\n    matrix[2] = (db * egfh - dc * effh + dd * effg) * determinantinverse;\n    matrix[3] = (cc * effh - cb * egfh - cd * effg) * determinantinverse;\n\n    matrix[4] = (bc * gehh - ba * gghh - bd * gehg) * determinantinverse;\n    matrix[5] = (aa * gghh - ac * gehh + ad * gehg) * determinantinverse;\n    matrix[6] = (dc * eefh - da * egfh - dd * eefg) * determinantinverse;\n    matrix[7] = (ca * egfh - cc * eefh + cd * eefg) * determinantinverse;\n\n    matrix[8] = (ba * gfhh - bb * gehh + bd * gehf) * determinantinverse;\n    matrix[9] = (ab * gehh - aa * gfhh - ad * gehf) * determinantinverse;\n    matrix[10] = (da * effh - db * eefh + dd * eeff) * determinantinverse;\n    matrix[11] = (cb * eefh - ca * effh - cd * eeff) * determinantinverse;\n\n    matrix[12] = (bb * gehg - ba * gfhg - bc * gehf) * determinantinverse;\n    matrix[13] = (aa * gfhg - ab * gehg + ac * gehf) * determinantinverse;\n    matrix[14] = (db * eefg - da * effg - dc * eeff) * determinantinverse;\n    matrix[15] = (ca * effg - cb * eefg + cc * eeff) * determinantinverse;\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 lookat matrix from given reference matrix and its target.\n * @param {matrix4} $matrix The reference matrix.\n * @param {vector3} $target The target position vector.\n * @param {vector3} $target The up vector used when looking at the target matrix.\n * @returns {matrix4}\n */\nfunction lookat($matrix, $target, $up) {\n\n    const matrix = identity();\n\n    const sourcex = $matrix[12];\n    const sourcey = $matrix[13];\n    const sourcez = $matrix[14];\n\n    const upx = $up[0];\n    const upy = $up[1];\n    const upz = $up[2];\n\n    let dx = sourcex - $target[0];\n    let dy = sourcey - $target[1];\n    let dz = sourcez - $target[2];\n\n    let length = dx * dx + dy * dy + dz * dz;\n\n    if (length > 0) {\n\n        length = 1 / Math.sqrt(length);\n\n        dx *= length;\n        dy *= length;\n        dz *= length;\n    }\n\n    let ax = upy * dz - upz * dy;\n    let ay = upz * dx - upx * dz;\n    let az = upx * dy - upy * dx;\n\n    length = ax * ax + ay * ay + az * az;\n\n    if (length > 0) {\n\n        length = 1 / Math.sqrt(length);\n\n        ax *= length;\n        ay *= length;\n        az *= length;\n    }\n\n    matrix[0] = ax;\n    matrix[1] = ay;\n    matrix[2] = az;\n    matrix[3] = 0;\n\n    matrix[4] = dy * az - dz * ay;\n    matrix[5] = dz * ax - dx * az;\n    matrix[6] = dx * ay - dy * ax;\n    matrix[7] = 0;\n\n    matrix[8] = dx;\n    matrix[9] = dy;\n    matrix[10] = dz;\n    matrix[11] = 0;\n\n    matrix[12] = sourcex;\n    matrix[13] = sourcey;\n    matrix[14] = sourcez;\n    matrix[15] = 1;\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 multiplied matrix from two given matrices.\n * @param {matrix4} $matrixa The matrix to multiply on.\n * @param {matrix4} $matrixb The matrix to multiply with.\n * @returns {matrix4}\n */\nfunction multiply($matrixa, $matrixb) {\n\n    const [\n\n        aa, ab, ac, ad,\n        ba, bb, bc, bd,\n        ca, cb, cc, cd,\n        da, db, dc, dd\n\n    ] = $matrixa;\n\n    const [\n\n        ee, ef, eg, eh,\n        fe, ff, fg, fh,\n        ge, gf, gg, gh,\n        he, hf, hg, hh\n\n    ] = $matrixb;\n\n    const matrix = identity();\n\n    matrix[0] = aa * ee + ba * ef + ca * eg + da * eh;\n    matrix[1] = ab * ee + bb * ef + cb * eg + db * eh;\n    matrix[2] = ac * ee + bc * ef + cc * eg + dc * eh;\n    matrix[3] = ad * ee + bd * ef + cd * eg + dd * eh;\n\n    matrix[4] = aa * fe + ba * ff + ca * fg + da * fh;\n    matrix[5] = ab * fe + bb * ff + cb * fg + db * fh;\n    matrix[6] = ac * fe + bc * ff + cc * fg + dc * fh;\n    matrix[7] = ad * fe + bd * ff + cd * fg + dd * fh;\n\n    matrix[8] = aa * ge + ba * gf + ca * gg + da * gh;\n    matrix[9] = ab * ge + bb * gf + cb * gg + db * gh;\n    matrix[10] = ac * ge + bc * gf + cc * gg + dc * gh;\n    matrix[11] = ad * ge + bd * gf + cd * gg + dd * gh;\n\n    matrix[12] = aa * he + ba * hf + ca * hg + da * hh;\n    matrix[13] = ab * he + bb * hf + cb * hg + db * hh;\n    matrix[14] = ac * he + bc * hf + cc * hg + dc * hh;\n    matrix[15] = ad * he + bd * hf + cd * hg + dd * hh;\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 orthographic projection matrix.\n * @param {number} $left The left bound of the frustum.\n * @param {number} $right The right bound of the frustum.\n * @param {number} $bottom The bottom bound of the frustum.\n * @param {number} $top The top bound of the frustum.\n * @param {number} $near The near bound of the frustum.\n * @param {number} $far The far bound of the frustum.\n * @returns {matrix4}\n */\nfunction orthographic($left, $right, $bottom, $top, $near, $far) {\n\n    const dx = 1 / ($left - $right);\n    const dy = 1 / ($bottom - $top);\n    const dz = 1 / ($near - $far);\n\n    const matrix = identity();\n\n    matrix[0] = -2 * dx;\n    matrix[1] = 0;\n    matrix[2] = 0;\n    matrix[3] = 0;\n\n    matrix[4] = 0;\n    matrix[5] = -2 * dy;\n    matrix[6] = 0;\n    matrix[7] = 0;\n\n    matrix[8] = 0;\n    matrix[9] = 0;\n    matrix[10] = 2 * dz;\n    matrix[11] = 0;\n\n    matrix[12] = ($left + $right) * dx;\n    matrix[13] = ($top + $bottom) * dy;\n    matrix[14] = ($far + $near) * dz;\n    matrix[15] = 1;\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 perspective projection matrix.\n * @param {number} $angle The field of view in radians.\n * @param {number} $aspect The aspect ratio of the field of view (width / height).\n * @param {number} $near The distance to the near clipping plane.\n * @param {number} [$far] The distance to the far clipping plane (infinity if not given).\n * @returns {matrix4}\n */\nfunction perspective($angle, $aspect, $near, $far) {\n\n    const tangent = Math.tan((Math.PI - $angle) * 0.5);\n\n    const matrix = identity();\n\n    matrix[0] = tangent / $aspect;\n    matrix[1] = 0;\n    matrix[2] = 0;\n    matrix[3] = 0;\n\n    matrix[4] = 0;\n    matrix[5] = tangent;\n    matrix[6] = 0;\n    matrix[7] = 0;\n\n    matrix[8] = 0;\n    matrix[9] = 0;\n    matrix[10] = -1;\n    matrix[11] = -1;\n\n    matrix[12] = 0;\n    matrix[13] = 0;\n    matrix[14] = -2 * $near;\n    matrix[15] = 0;\n\n    if (typeof $far === 'number') {\n\n        const range = $near - $far;\n        const rangeinverse = 1 / range;\n\n        matrix[10] = ($near + $far) * rangeinverse;\n        matrix[14] = $near * $far * 2 * rangeinverse;\n    }\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 rotated matrix on the x-axis from given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @param {number} $angle The angle of rotation in radians to apply.\n * @returns {matrix4}\n */\nfunction rotatex($matrix, $angle) {\n\n    const cosine = Math.cos($angle);\n    const sine = Math.sin($angle);\n\n    const ab = $matrix[1];\n    const ac = $matrix[2];\n    const bb = $matrix[5];\n    const bc = $matrix[6];\n    const cb = $matrix[9];\n    const cc = $matrix[10];\n\n    const matrix = clone($matrix);\n\n    matrix[1] = ab * cosine - ac * sine;\n    matrix[2] = ac * cosine + ab * sine;\n    matrix[5] = bb * cosine - bc * sine;\n    matrix[6] = bc * cosine + bb * sine;\n    matrix[9] = cb * cosine - cc * sine;\n    matrix[10] = cc * cosine + cb * sine;\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 rotated matrix on the y-axis from given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @param {number} $angle The angle of rotation in radians to apply.\n * @returns {matrix4}\n */\nfunction rotatey($matrix, $angle) {\n\n    const cosine = Math.cos($angle);\n    const sine = Math.sin($angle);\n\n    const aa = $matrix[0];\n    const ac = $matrix[2];\n    const ba = $matrix[4];\n    const bc = $matrix[6];\n    const ca = $matrix[8];\n    const cc = $matrix[10];\n\n    const matrix = clone($matrix);\n\n    matrix[0] = aa * cosine + ac * sine;\n    matrix[2] = ac * cosine - aa * sine;\n    matrix[4] = ba * cosine + bc * sine;\n    matrix[6] = bc * cosine - ba * sine;\n    matrix[8] = ca * cosine + cc * sine;\n    matrix[10] = cc * cosine - ca * sine;\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 rotated matrix on the z-axis from given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @param {number} $angle The angle of rotation in radians to apply.\n * @returns {matrix4}\n */\nfunction rotatez($matrix, $angle) {\n\n    const cosine = Math.cos($angle);\n    const sine = Math.sin($angle);\n\n    const aa = $matrix[0];\n    const ab = $matrix[1];\n    const ba = $matrix[4];\n    const bb = $matrix[5];\n    const ca = $matrix[8];\n    const cb = $matrix[9];\n\n    const matrix = clone($matrix);\n\n    matrix[0] = aa * cosine - ab * sine;\n    matrix[1] = ab * cosine + aa * sine;\n    matrix[4] = ba * cosine - bb * sine;\n    matrix[5] = bb * cosine + ba * sine;\n    matrix[8] = ca * cosine - cb * sine;\n    matrix[9] = cb * cosine + ca * sine;\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 scaled matrix from given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @param {vector3} $vector3 The scale to apply.\n * @returns {matrix4}\n */\nfunction scale($matrix, $vector3) {\n\n    const [x, y, z] = $vector3;\n\n    const [\n\n        aa, ab, ac, ad,\n        ba, bb, bc, bd,\n        ca, cb, cc, cd,\n        da, db, dc, dd\n\n    ] = $matrix;\n\n    const matrix = identity();\n\n    matrix[0] = aa * x;\n    matrix[1] = ab * x;\n    matrix[2] = ac * x;\n    matrix[3] = ad * x;\n\n    matrix[4] = ba * y;\n    matrix[5] = bb * y;\n    matrix[6] = bc * y;\n    matrix[7] = bd * y;\n\n    matrix[8] = ca * z;\n    matrix[9] = cb * z;\n    matrix[10] = cc * z;\n    matrix[11] = cd * z;\n\n    matrix[12] = da;\n    matrix[13] = db;\n    matrix[14] = dc;\n    matrix[15] = dd;\n\n    return matrix;\n}\n\n/**\n * Gets a new 4x4 translated matrix from given reference matrix.\n * @param {matrix4} $matrix The reference matrix.\n * @param {vector3} $vector3 The translation to apply.\n * @returns {matrix4}\n */\nfunction translate($matrix, $vector3) {\n\n    const [x, y, z] = $vector3;\n\n    const [\n\n        aa, ab, ac, ad,\n        ba, bb, bc, bd,\n        ca, cb, cc, cd,\n        da, db, dc, dd\n\n    ] = $matrix;\n\n    const matrix = clone($matrix);\n\n    matrix[12] = aa * x + ba * y + ca * z + da;\n    matrix[13] = ab * x + bb * y + cb * z + db;\n    matrix[14] = ac * x + bc * y + cc * z + dc;\n    matrix[15] = ad * x + bd * y + cd * z + dd;\n\n    return matrix;\n}\n\nexport {\n\n    clone,\n    create,\n    fromquaternion,\n    getrotation,\n    getscale,\n    gettranslation,\n    identity,\n    invert,\n    lookat,\n    multiply,\n    orthographic,\n    perspective,\n    rotatex,\n    rotatey,\n    rotatez,\n    scale,\n    translate\n};\n","/**\n * The number of colors in the 24-bit color format (True Color).\n * @type {number}\n * @constant\n */\nconst COLORS_24_BITS = Math.pow(256, 3);\n\n/**\n * The golden ratio.\n * @type {number}\n * @constant\n */\nconst GOLDEN_RATIO = (Math.sqrt(5) + 1) * 0.5;\n\n/**\n * The 8-decimals precision.\n * @type {number}\n * @constant\n */\nconst PRECISION_DECIMALS_8 = 8;\n\n/**\n * The 8-decimals precision error margin (epsilon).\n * @type {number}\n * @constant\n */\nconst PRECISION_EPSILON_8 = Math.pow(10, - PRECISION_DECIMALS_8);\n\n/**\n * The value to convert an angle from degrees to radians.\n * @type {number}\n * @constant\n */\nconst RADIANS = Math.PI / 180;\n\nexport {\n\n    COLORS_24_BITS,\n    GOLDEN_RATIO,\n    PRECISION_DECIMALS_8,\n    PRECISION_EPSILON_8,\n    RADIANS\n};\n","import {Camera, CameraPerspective, CONSTANTS, Fog, LightAmbiant, LightDirectional, Material, MaterialColor, MeshBox, MeshInclinedPlane, Node, QUATERNION, Skybox} from '../../index.js';\n\n/**\n * Gets an Hypercube.js default camera.\n * @returns {Camera}\n */\nfunction camera() {\n\n    return cameraperspective();\n}\n\n/**\n * Gets an Hypercube.js default perspective camera.\n * @returns {CameraPerspective}\n */\nfunction cameraperspective() {\n\n    return new CameraPerspective('Hypercube.js - Defaults - cameraperspective()', {\n\n        'angle': 50,\n        'far': 256,\n        'near': 0.1\n    });\n}\n\n/**\n * Gets an Hypercube.js default ambiant color.\n * @returns {vector3}\n */\nfunction colorambiant() {\n\n    const intensity = 0.2;\n\n    return [0.8 * intensity, 0.9 * intensity, 1.0 * intensity];\n}\n\n/**\n * Gets an Hypercube.js default fog.\n * @returns {Fog}\n */\nfunction fog() {\n\n    return new Fog(colorambiant(), 0, 16, 1.0);\n}\n\n/**\n * Gets an Hypercube.js default invisible fog.\n * @returns {Fog}\n */\nfunction foginvisible() {\n\n    return new Fog([1.0, 1.0, 1.0], Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, 0.0);\n}\n\n/**\n * Gets an Hypercube.js default ambiant light.\n * @returns {LightAmbiant}\n */\nfunction lightambiant() {\n\n    return new LightAmbiant('Hypercube.js - Defaults - lightambiant()', colorambiant());\n}\n\n/**\n * Gets an Hypercube.js default directional light.\n * @returns {LightDirectional}\n */\nfunction lightdirectional() {\n\n    return new LightDirectional('Hypercube.js - Defaults - lightdirectional()', [-0.8, -1.0, -0.4], [1.0, 1.0, 1.0]);\n}\n\n/**\n * Gets an Hypercube.js default material.\n * @returns {Material}\n */\nfunction material() {\n\n    return materialcolor();\n}\n\n/**\n * Gets an Hypercube.js default color material.\n * @returns {MaterialColor}\n */\nfunction materialcolor() {\n\n    const parameters = {\n\n        'color': [1.0, 1.0, 1.0]\n    };\n\n    return new MaterialColor('Hypercube.js - Defaults - materialcolor()', parameters);\n}\n\n/**\n * Gets an Hypercube.js default cube mesh.\n * @returns {MeshBox}\n */\nfunction meshcube() {\n\n    const mesh = new MeshBox('Hypercube.js - Defaults - meshcube()', [1, 1, 1]);\n\n    mesh.setmaterial(materialcolor());\n\n    return mesh;\n}\n\n/**\n * Gets an Hypercube.js default inclined plane mesh.\n * @returns {MeshInclinedPlane}\n */\nfunction meshinclinedplane() {\n\n    const mesh = new MeshInclinedPlane('Hypercube.js - Defaults - meshinclinedplane()');\n\n    mesh.setmaterial(materialcolor());\n\n    return mesh;\n}\n\n/**\n * Gets an Hypercube.js default node.\n * @returns {Node}\n */\nfunction node() {\n\n    return new Node('Hypercube.js - Defaults - node()');\n}\n\n/**\n * Gets an Hypercube.js default camera node.\n * @returns {Node}\n */\nfunction nodecamera() {\n\n    const node = new Node('Hypercube.js - Defaults - nodecamera()');\n\n    node.setcamera(camera());\n\n    node.rotate(QUATERNION.fromeuler([\n\n        -22.5 * CONSTANTS.RADIANS,\n        45 * CONSTANTS.RADIANS,\n        0 * CONSTANTS.RADIANS\n    ]));\n\n    node.translateself([0, 0, 16]);\n\n    return node;\n}\n\n/**\n * Gets an Hypercube.js default root node.\n * @returns {Node}\n */\nfunction noderoot() {\n\n    const node = new Node('Hypercube.js - Defaults - noderoot()');\n\n    node.addmesh(meshcube());\n\n    return node;\n}\n\n/**\n * Gets an Hypercube.js default rotation.\n * @returns {quaternion}\n */\nfunction rotation() {\n\n    return QUATERNION.identity();\n}\n\n/**\n * Gets an Hypercube.js default skybox.\n * @returns {Skybox}\n */\nfunction skybox() {\n\n    return new Skybox('Hypercube.js - Defaults - skybox()', colorambiant());\n}\n\n/**\n * Gets an Hypercube.js default translation.\n * @returns {vector3}\n */\nfunction translation() {\n\n    return [0, 0, 0];\n}\n\n/**\n * Gets an Hypercube.js default up vector.\n * @returns {vector3}\n */\nfunction vectorup() {\n\n    return [0, 1, 0];\n}\n\nexport {\n\n    camera,\n    cameraperspective,\n    colorambiant,\n    fog,\n    foginvisible,\n    lightambiant,\n    lightdirectional,\n    material,\n    materialcolor,\n    meshcube,\n    meshinclinedplane,\n    node,\n    nodecamera,\n    noderoot,\n    rotation,\n    skybox,\n    translation,\n    vectorup\n};\n","import {Loop} from '../../index.js';\n\n/**\n * Creates Hypercube.js Game Engines.\n * @example\n * const engine = new Engine();\n */\nclass Engine {\n\n    /**\n     * Stores the viewer device.\n     * @type {import('../../index.js').DeviceViewer}\n     * @private\n     */\n    $deviceviewer;\n\n    /**\n     * Stores the loop.\n     * @type {import('../../index.js').Loop}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores current scene.\n     * @type {import('../../index.js').Scene}\n     * @private\n     */\n    $scene;\n\n    /**\n     * Stores the systems.\n     * @type {import('../../index.js').System[]}\n     * @private\n     */\n    $systems;\n\n    /**\n     * Gets the viewer device.\n     * @type {import('../../index.js').DeviceViewer}\n     * @public\n     * @readonly\n     */\n    get deviceviewer() {\n\n        return this.$deviceviewer;\n    }\n\n    /**\n     * Gets current scene.\n     * @type {import('../../index.js').Scene}\n     * @public\n     * @readonly\n     */\n    get scene() {\n\n        return this.$scene;\n    }\n\n    /**\n     * Creates a new Hypercube.js Game Engine.\n     */\n    constructor() {\n\n        this.$systems = [];\n    }\n\n    /**\n     * Destroys the engine.\n     * @public\n     */\n    destroy() {\n\n        if (typeof this.$loop !== 'undefined') {\n\n            this.$loop.destroy();\n        }\n\n        this.$systems.forEach(($system) => {\n\n            $system.destroy();\n        });\n    }\n\n    /**\n     * Resizes the game once.\n     * @public\n     */\n    resize() {\n\n        if (typeof this.$deviceviewer !== 'undefined') {\n\n            this.$deviceviewer.setsize();\n        }\n\n        this.$systems.forEach(($system) => {\n\n            $system.resize();\n        });\n    }\n\n    /**\n     * Runs the loop.\n     * @param {number} [$framerate] The framerate (in fps) to run the loop.\n     * @public\n     */\n    run($framerate = 60) {\n\n        if (typeof this.$loop !== 'undefined') {\n\n            this.$loop.destroy();\n        }\n\n        this.$loop = new Loop(this.tick.bind(this));\n\n        this.$loop.run($framerate);\n    }\n\n    /**\n     * Sets the viewer device.\n     * @param {import('../../index.js').DeviceViewer} $deviceviewer The viewer device to set.\n     * @public\n     */\n    setdeviceviewer($deviceviewer) {\n\n        this.$deviceviewer = $deviceviewer;\n    }\n\n    /**\n     * Starts each system.\n     * @public\n     */\n    start() {\n\n        this.$systems.forEach(($system) => {\n\n            $system.start();\n            $system.tick(0);\n        });\n    }\n\n    /**\n     * Updates each system once.\n     * @param {number} $timeframe The timeframe duration (in ms).\n     * @public\n     */\n    tick($timeframe) {\n\n        this.$systems.forEach(($system) => {\n\n            $system.tick($timeframe);\n        });\n    }\n\n    /**\n     * Uses systems with given scene.\n     * @param {import('../../index.js').Scene} $scene The scene to use.\n     * @param {import('../../index.js').System[]} $systems The systems to use.\n     * @public\n     */\n    use($scene, $systems) {\n\n        const systems = [...$systems];\n\n        this.$scene = $scene;\n        this.$systems = systems;\n\n        this.$systems.forEach(($system) => {\n\n            $system.setengine(this);\n        });\n    }\n}\n\nexport {\n\n    Engine\n};\n\nexport default Engine;\n","import {VECTOR3} from '../../index.js';\n\n/**\n * Creates Hypercube.js fogs.\n * @example\n * const fog = new Fog(color, distancefogbegin, distancefogmaximum, density);\n */\nclass Fog {\n\n    /**\n     * Stores the color.\n     * @type {vector3}\n     * @protected\n     */\n    $color;\n\n    /**\n     * Stores the density.\n     * @type {number}\n     * @protected\n     */\n    $density;\n\n    /**\n     * Stores the minimal distance for the fog to begin.\n     * @type {number}\n     * @protected\n     */\n    $distancefogbegin;\n\n    /**\n     * Stores the distance for the fog to be at its maximum.\n     * @type {number}\n     * @protected\n     */\n    $distancefogmaximum;\n\n    /**\n     * Gets the color.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get color() {\n\n        return this.$color;\n    };\n\n    /**\n     * Gets the density.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get density() {\n\n        return this.$density;\n    };\n\n    /**\n     * Gets the minimal distance for the fog to begin.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get distancefogbegin() {\n\n        return this.$distancefogbegin;\n    };\n\n    /**\n     * Gets the distance for the fog to be at its maximum.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get distancefogmaximum() {\n\n        return this.$distancefogmaximum;\n    };\n\n    /**\n     * Creates a new Hypercube.js fog.\n     * @param {vector3} $color The color of the fog.\n     * @param {number} $distancefogbegin The minimal distance for the fog to begin.\n     * @param {number} $distancefogmaximum The distance for the fog to be at its maximum.\n     * @param {number} $density The density of the fog.\n     */\n    constructor($color, $distancefogbegin, $distancefogmaximum, $density) {\n\n        this.$color = VECTOR3.clone($color);\n        this.$distancefogbegin = $distancefogbegin;\n        this.$distancefogmaximum = $distancefogmaximum;\n        this.$density = $density;\n    }\n}\n\nexport {\n\n    Fog\n};\n\nexport default Fog;\n","/**\n * Creates update loops.\n * @example\n * const loop = new Loop(handler);\n * loop.run();\n */\nclass Loop {\n\n    /**\n     * Stores the handler to run with the loop.\n     * @type {Function}\n     * @private\n     */\n    $handler;\n\n    /**\n     * Stores the identifier of the last requestAnimationFrame call.\n     * @type {number}\n     * @private\n     */\n    $identifier;\n\n    /**\n     * Stores the time value of the last frame call.\n     * @type {number}\n     * @private\n     */\n    $lasttime;\n\n    /**\n     * Stores the accumulated latency time since the loop started.\n     * @type {number}\n     * @private\n     */\n    $latencytime;\n\n    /**\n     * Stores the global scope used.\n     * @type {typeof globalThis}\n     * @private\n     */\n    $scope;\n\n    /**\n     * Creates a new update loop.\n     * @param {Function} $handler The handler to run with the loop.\n     * @param {typeof globalThis} $scope The global scope to use.\n     */\n    constructor($handler, $scope = window) {\n\n        this.$handler = $handler;\n        this.$latencytime = 0;\n        this.$scope = $scope;\n    }\n\n    /**\n     * Destroys the loop.\n     * @public\n     */\n    destroy() {\n\n        if (typeof this.$identifier !== 'undefined') {\n\n            this.$scope.cancelAnimationFrame(this.$identifier);\n        }\n    }\n\n    /**\n     * Runs the loop.\n     * @param {number} [$framerate] The framerate to run the loop (in fps).\n     * @public\n     */\n    run($framerate = 60) {\n\n        const currenttime = performance.now();\n\n        if (typeof this.$lasttime !== 'undefined') {\n\n            this.$latencytime += currenttime - this.$lasttime;\n\n            const timeframe = 1000 / $framerate;\n\n            if (this.$latencytime >= timeframe) {\n\n                this.$latencytime -= timeframe;\n\n                this.$handler(timeframe);\n            }\n        }\n\n        this.$identifier = this.$scope.requestAnimationFrame(this.run.bind(this, $framerate));\n\n        this.$lasttime = currenttime;\n    }\n}\n\nexport {\n\n    Loop\n};\n\nexport default Loop;\n","/**\n * Abstract Hypercube.js material.\n * @example\n * class MaterialExample extends Material {}\n */\nclass Material {\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the parameters.\n     * @type {any}\n     * @protected\n     */\n    $parameters;\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type;\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the parameters.\n     * @type {any}\n     * @public\n     * @readonly\n     */\n    get parameters() {\n\n        return this.$parameters;\n    };\n\n    /**\n     * Gets the type.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get type() {\n\n        return this.$type;\n    };\n\n    // @TODO : replace {any} for $parameters\n\n    /**\n     * Creates a new Hypercube.js material.\n     * @param {string} [$name] The name of the material.\n     * @param {any} [$parameters] The parameters of the material.\n     */\n    constructor($name = 'Material', $parameters = {}) {\n\n        this.$name = $name;\n\n        this.$parameters = structuredClone($parameters);\n    }\n}\n\nexport {\n\n    Material\n};\n\nexport default Material;\n","/**\n * Gets a new clone of given reference quaternion.\n * @param {quaternion} $quaternion The reference quaternion.\n * @returns {quaternion}\n */\nfunction clone($quaternion) {\n\n    return [...$quaternion];\n}\n\n/**\n * Creates a new 4x4 quaternion.\n * @param {[number, number, number, number]} $values The matrix values.\n * @returns {quaternion}\n */\nfunction create($values) {\n\n    return [...$values];\n}\n\n/**\n * Check the equality of two given quaternions.\n * @param {quaternion} $quaterniona The quaternion to check on.\n * @param {quaternion} $quaternionb The quaternion to check with.\n * @returns {boolean}\n */\n function equal($quaterniona, $quaternionb) {\n\n    const [xa, ya, za, wa] = $quaterniona;\n    const [xb, yb, zb, wb] = $quaternionb;\n\n    return xa === xb\n    && ya === yb\n    && za === zb\n    && wa === wb;\n}\n\n/**\n * Gets a new quaternion from given reference Euler angles.\n * @param {[number, number, number]} $angles The reference Euler angles in radians for the x-axis, y-axis and z-axis.\n * @returns {quaternion}\n */\nfunction fromeuler($angles) {\n\n    let [x, y, z] = $angles;\n\n    x *= 0.5;\n    y *= 0.5;\n    z *= 0.5;\n\n    const quaternion = identity();\n\n    const cosinex = Math.cos(x);\n    const sinex = Math.sin(x);\n\n    const cosiney = Math.cos(y);\n    const siney = Math.sin(y);\n\n    const cosinez = Math.cos(z);\n    const sinez = Math.sin(z);\n\n    quaternion[0] = sinex * cosiney * cosinez - cosinex * siney * sinez;\n    quaternion[1] = cosinex * siney * cosinez + sinex * cosiney * sinez;\n    quaternion[2] = cosinex * cosiney * sinez - sinex * siney * cosinez;\n    quaternion[3] = cosinex * cosiney * cosinez + sinex * siney * sinez;\n\n    return quaternion;\n}\n\n/**\n * Gets a new identity quaternion.\n * @returns {quaternion}\n */\nfunction identity() {\n\n    return [0, 0, 0, 1];\n}\n\n/**\n * Gets a new inverted quaternion from given quaternion.\n * @param {quaternion} $quaternion The reference quaternion.\n * @returns {quaternion}\n */\nfunction invert($quaternion) {\n\n    const [x, y, z, w] = $quaternion;\n\n    const quaternion = identity();\n\n    const dot = x * x + y * y + z * z + w * w;\n\n    if (dot === 0) {\n\n        quaternion[0] = 0;\n        quaternion[1] = 0;\n        quaternion[2] = 0;\n        quaternion[3] = 0;\n\n        return quaternion;\n    }\n\n    const dotinverse = 1 / dot;\n\n    quaternion[0] = - x * dotinverse;\n    quaternion[1] = - y * dotinverse;\n    quaternion[2] = - z * dotinverse;\n    quaternion[3] = w * dotinverse;\n\n    return quaternion;\n}\n\n/**\n * Gets a new multiplied quaternion from two given quaternions.\n * @param {quaternion} $quaterniona The quaternion to multiply on.\n * @param {quaternion} $quaternionb The quaternion to multiply with.\n * @returns {quaternion}\n */\nfunction multiply($quaterniona, $quaternionb) {\n\n    const [ax, ay, az, aw] = $quaterniona;\n    const [bx, by, bz, bw] = $quaternionb;\n\n    const quaternion = identity();\n\n    quaternion[0] = ax * bw + aw * bx + ay * bz - az * by;\n    quaternion[1] = ay * bw + aw * by + az * bx - ax * bz;\n    quaternion[2] = az * bw + aw * bz + ax * by - ay * bx;\n    quaternion[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n    return quaternion;\n}\n\n/**\n * Gets a new normalize quaternion from given reference quaternion.\n * @param {quaternion} $quaternion The reference quaternion.\n * @returns {quaternion}\n */\nfunction normalize($quaternion) {\n\n    const [x, y, z, w] = $quaternion;\n\n    const quaternion = identity();\n\n    let length = x * x + y * y + z * z + w * w;\n\n    if (length > 0) {\n\n        length = 1 / Math.sqrt(length);\n    }\n\n    quaternion[0] = x * length;\n    quaternion[1] = y * length;\n    quaternion[2] = z * length;\n    quaternion[3] = w * length;\n\n    return quaternion;\n}\n\n// @TODO\nfunction toeuler($quaternion) {\n    const [x, y, z, w] = $quaternion;\n\n    const ysqr = y * y;\n\n    const t0 = 2.0 * (w * x + y * z);\n    const t1 = 1.0 - 2.0 * (x * x + ysqr);\n    const roll = Math.atan2(t0, t1);\n\n    const t2 = 2.0 * (w * y - z * x);\n    t2 > 1.0 ? 1.0 : t2;\n    t2 < -1.0 ? -1.0 : t2;\n    const pitch = Math.asin(t2);\n\n    const t3 = 2.0 * (w * z + x * y);\n    const t4 = 1.0 - 2.0 * (ysqr + z * z);\n    const yaw = Math.atan2(t3, t4);\n\n    return [roll, pitch, yaw];\n  }\n\nexport {\n\n    clone,\n    create,\n    equal,\n    fromeuler,\n    identity,\n    invert,\n    multiply,\n    normalize,\n    toeuler\n};\n","import {CONSTANTS, UTILS} from '../../index.js';\n\n/**\n * Gets a new resultant vector from the addition of two given vectors.\n * @param {vector3} $vector3a The vector to add on.\n * @param {vector3} $vector3b The vector to add with.\n * @returns {vector3}\n */\nfunction add($vector3a, $vector3b) {\n\n    const [xa, ya, za] = $vector3a;\n    const [xb, yb, zb] = $vector3b;\n\n    const vector = identity();\n\n    vector[0] = xa + xb;\n    vector[1] = ya + yb;\n    vector[2] = za + zb;\n\n    return vector;\n}\n\n/**\n * Gets a new resultant vector from the addition of two given vectors with a given decimal precision.\n * @param {vector3} $vector3a The vector to add on.\n * @param {vector3} $vector3b The vector to add with.\n * @param {number} [$decimals] The decimal precision.\n * @returns {vector3}\n */\nfunction addround($vector3a, $vector3b, $decimals = CONSTANTS.PRECISION_DECIMALS_8) {\n\n    const [xa, ya, za] = $vector3a;\n    const [xb, yb, zb] = $vector3b;\n\n    const vector = identity();\n\n    vector[0] = UTILS.round(xa + xb, $decimals);\n    vector[1] = UTILS.round(ya + yb, $decimals);\n    vector[2] = UTILS.round(za + zb, $decimals);\n\n    return vector;\n}\n\n/**\n * Gets a new clone of given reference vector.\n * @param {vector3} $vector The reference vector.\n * @returns {vector3}\n */\nfunction clone($vector) {\n\n    return [...$vector];\n}\n\n/**\n * Creates a new vector from three given values.\n * @param {[number, number, number]} $values The vector values.\n * @returns {vector3}\n */\nfunction create($values) {\n\n    return [...$values];\n}\n\n/**\n * Checks the equality of two given vectors.\n * @param {vector3} $vector3a The vector to check on.\n * @param {vector3} $vector3b The vector to check with.\n * @returns {boolean}\n */\nfunction equal($vector3a, $vector3b) {\n\n    const [xa, ya, za] = $vector3a;\n    const [xb, yb, zb] = $vector3b;\n\n    return xa === xb\n    && ya === yb\n    && za === zb;\n}\n\n/**\n * Checks the equality of two given vectors with a given decimal precision.\n * @param {vector3} $vector3a The vector to check on.\n * @param {vector3} $vector3b The vector to check with.\n * @param {number} [$decimals] The decimal precision.\n * @returns {boolean}\n */\nfunction equalround($vector3a, $vector3b, $decimals = CONSTANTS.PRECISION_DECIMALS_8) {\n\n    const [xa, ya, za] = $vector3a;\n    const [xb, yb, zb] = $vector3b;\n\n    return UTILS.round(xa, $decimals) === UTILS.round(xb, $decimals)\n    && UTILS.round(ya, $decimals) === UTILS.round(yb, $decimals)\n    && UTILS.round(za, $decimals) === UTILS.round(zb, $decimals);\n}\n\n/**\n * Gets a new identity vector.\n * @returns {vector3}\n */\nfunction identity() {\n\n    return [0, 0, 0];\n}\n\n/**\n * Gets a new resultant vector from the multiplication of two given vectors.\n * @param {vector3} $vector3a The vector to multiply on.\n * @param {vector3} $vector3b The vector to multiply with.\n * @returns {vector3}\n */\nfunction multiply($vector3a, $vector3b) {\n\n    const [xa, ya, za] = $vector3a;\n    const [xb, yb, zb] = $vector3b;\n\n    const vector = identity();\n\n    vector[0] = xa * xb;\n    vector[1] = ya * yb;\n    vector[2] = za * zb;\n\n    return vector;\n}\n\n/**\n * Gets a new resultant vector from the multiplication of two given vectors with a given decimal precision.\n * @param {vector3} $vector3a The vector to multiply on.\n * @param {vector3} $vector3b The vector to multiply with.\n * @param {number} [$decimals] The decimal precision.\n * @returns {vector3}\n */\nfunction multiplyround($vector3a, $vector3b, $decimals = CONSTANTS.PRECISION_DECIMALS_8) {\n\n    const [xa, ya, za] = $vector3a;\n    const [xb, yb, zb] = $vector3b;\n\n    const vector = identity();\n\n    vector[0] = UTILS.round(xa * xb, $decimals);\n    vector[1] = UTILS.round(ya * yb, $decimals);\n    vector[2] = UTILS.round(za * zb, $decimals);\n\n    return vector;\n}\n\n/**\n * Gets a new resultant vector from the multiplication of a vector by a scalar factor.\n * @param {vector3} $vector3 The vector to multiply on.\n * @param {number} $factor The scalar factor to multiply with.\n * @returns {vector3}\n */\nfunction multiplyscalar($vector3, $factor) {\n\n    const [xa, ya, za] = $vector3;\n\n    const vector = identity();\n\n    vector[0] = xa * $factor;\n    vector[1] = ya * $factor;\n    vector[2] = za * $factor;\n\n    return vector;\n}\n\n/**\n * Gets a new resultant vector from the multiplication of a vector by a scalar factor with a given decimal precision.\n * @param {vector3} $vector3 The vector to multiply on.\n * @param {number} $factor The scalar factor to multiply with.\n * @param {number} [$decimals] The decimal precision.\n * @returns {vector3}\n */\nfunction multiplyscalarround($vector3, $factor, $decimals = CONSTANTS.PRECISION_DECIMALS_8) {\n\n    const [xa, ya, za] = $vector3;\n\n    const vector = identity();\n\n    vector[0] = UTILS.round(xa * $factor, $decimals);\n    vector[1] = UTILS.round(ya * $factor, $decimals);\n    vector[2] = UTILS.round(za * $factor, $decimals);\n\n    return vector;\n}\n\n/**\n * Gets a new negative vector from given reference vector.\n * @param {vector3} $vector3 The reference vector.\n * @returns {vector3}\n */\nfunction negate($vector3) {\n\n    const vector = identity();\n\n    vector[0] = - $vector3[0];\n    vector[1] = - $vector3[1];\n    vector[2] = - $vector3[2];\n\n    return vector;\n}\n\n/**\n * Gets a new negative vector from given reference vector with a given decimal precision.\n * @param {vector3} $vector3 The reference vector.\n * @param {number} [$decimals] The decimal precision.\n * @returns {vector3}\n */\nfunction negateround($vector3, $decimals = CONSTANTS.PRECISION_DECIMALS_8) {\n\n    const vector = identity();\n\n    vector[0] = UTILS.round(- $vector3[0], $decimals);\n    vector[1] = UTILS.round(- $vector3[1], $decimals);\n    vector[2] = UTILS.round(- $vector3[2], $decimals);\n\n    return vector;\n}\n\n/**\n * Gets a new normalize vector from given reference vector.\n * @param {vector3} $vector3 The reference vector.\n * @returns {vector3}\n */\nfunction normalize($vector3) {\n\n    const [x, y, z] = $vector3;\n\n    const vector = identity();\n\n    let length = x * x + y * y + z * z;\n\n    if (length > 0) {\n\n        length = 1 / Math.sqrt(length);\n    }\n\n    vector[0] = x * length;\n    vector[1] = y * length;\n    vector[2] = z * length;\n\n    return vector;\n}\n\n/**\n * Gets a new normalize vector from given reference vector with a given decimal precision.\n * @param {vector3} $vector3 The reference vector.\n * @param {number} [$decimals] The decimal precision.\n * @returns {vector3}\n */\nfunction normalizeround($vector3, $decimals = CONSTANTS.PRECISION_DECIMALS_8) {\n\n    const [x, y, z] = $vector3;\n\n    const vector = identity();\n\n    let length = x * x + y * y + z * z;\n\n    if (UTILS.round(length, $decimals) > 0) {\n\n        length = 1 / Math.sqrt(length);\n    }\n\n    vector[0] = UTILS.round(x * length, $decimals);\n    vector[1] = UTILS.round(y * length, $decimals);\n    vector[2] = UTILS.round(z * length, $decimals);\n\n    return vector;\n}\n\n/**\n * Gets a new rotated vector from given reference vector.\n * @param {vector3} $vector3 The reference vector.\n * @param {quaternion} $quaternion The rotation to apply.\n * @returns {vector3}\n */\nfunction rotate($vector3, $quaternion) {\n\n    const [xa, ya, za] = $vector3;\n    const [xb, yb, zb, wb] = $quaternion;\n\n    const vector = identity();\n\n    let uvx = yb * za - zb * ya;\n    let uvy = zb * xa - xb * za;\n    let uvz = xb * ya - yb * xa;\n\n    let uuvx = yb * uvz - zb * uvy;\n    let uuvy = zb * uvx - xb * uvz;\n    let uuvz = xb * uvy - yb * uvx;\n\n    const w = wb * 2;\n\n    uvx *= w;\n    uvy *= w;\n    uvz *= w;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    vector[0] = xa + uvx + uuvx;\n    vector[1] = ya + uvy + uuvy;\n    vector[2] = za + uvz + uuvz;\n\n    return vector;\n}\n\n/**\n * Gets a new rotated vector from given reference vector with a given decimal precision.\n * @param {vector3} $vector3 The reference vector.\n * @param {quaternion} $quaternion The rotation to apply.\n * @param {number} [$decimals] The decimal precision.\n * @returns {vector3}\n */\nfunction rotateround($vector3, $quaternion, $decimals = CONSTANTS.PRECISION_DECIMALS_8) {\n\n    const [xa, ya, za] = $vector3;\n    const [xb, yb, zb, wb] = $quaternion;\n\n    const vector = identity();\n\n    let uvx = yb * za - zb * ya;\n    let uvy = zb * xa - xb * za;\n    let uvz = xb * ya - yb * xa;\n\n    let uuvx = yb * uvz - zb * uvy;\n    let uuvy = zb * uvx - xb * uvz;\n    let uuvz = xb * uvy - yb * uvx;\n\n    const w = wb * 2;\n\n    uvx *= w;\n    uvy *= w;\n    uvz *= w;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    vector[0] = UTILS.round(xa + uvx + uuvx, $decimals);\n    vector[1] = UTILS.round(ya + uvy + uuvy, $decimals);\n    vector[2] = UTILS.round(za + uvz + uuvz, $decimals);\n\n    return vector;\n}\n\n/**\n * Gets a new resultant vector from the subtraction of two given vectors.\n * @param {vector3} $vector3a The vector to subtract on.\n * @param {vector3} $vector3b The vector to subtract with.\n * @returns {vector3}\n */\nfunction subtract($vector3a, $vector3b) {\n\n    const [xa, ya, za] = $vector3a;\n    const [xb, yb, zb] = $vector3b;\n\n    const vector = identity();\n\n    vector[0] = xa - xb;\n    vector[1] = ya - yb;\n    vector[2] = za - zb;\n\n    return vector;\n}\n\n/**\n * Gets a new resultant vector from the subtraction of two given vectors with a given decimal precision.\n * @param {vector3} $vector3a The vector to subtract on.\n * @param {vector3} $vector3b The vector to subtract with.\n * @param {number} [$decimals] The decimal precision.\n * @returns {vector3}\n */\nfunction subtractround($vector3a, $vector3b, $decimals = CONSTANTS.PRECISION_DECIMALS_8) {\n\n    const [xa, ya, za] = $vector3a;\n    const [xb, yb, zb] = $vector3b;\n\n    const vector = identity();\n\n    vector[0] = UTILS.round(xa - xb, $decimals);\n    vector[1] = UTILS.round(ya - yb, $decimals);\n    vector[2] = UTILS.round(za - zb, $decimals);\n\n    return vector;\n}\n\n/**\n * Gets a new resultant vector from the unprojection of given cliped/normalised vector and given unprojection matrix.\n * @param {vector3} $vector3 The cliped/normalised vector to unproject.\n * @param {matrix4} $matrix The unprojection matrix.\n * @returns {vector3}\n */\nfunction unproject($vector3, $matrix) {\n\n    const [x, y, z] = $vector3;\n\n    const vector = identity();\n\n    const [\n\n        aa, ab, ac, ad,\n        ba, bb, bc, bd,\n        ca, cb, cc, cd,\n        da, db, dc, dd\n\n    ] = $matrix;\n\n    const d = x * ad + y * bd + z * cd + dd;\n\n    if (d === 0) {\n\n        vector[0] = 0;\n        vector[1] = 0;\n        vector[2] = 0;\n\n        return vector;\n    }\n\n    const dinverse = 1 / d;\n\n    vector[0] = (x * aa + y * ba + z * ca + da) * dinverse;\n    vector[1] = (x * ab + y * bb + z * cb + db) * dinverse;\n    vector[2] = (x * ac + y * bc + z * cc + dc) * dinverse;\n\n    return vector;\n}\n\nexport {\n\n    add,\n    addround,\n    clone,\n    create,\n    equal,\n    equalround,\n    identity,\n    multiply,\n    multiplyround,\n    multiplyscalar,\n    multiplyscalarround,\n    negate,\n    negateround,\n    normalize,\n    normalizeround,\n    rotate,\n    rotateround,\n    subtract,\n    subtractround,\n    unproject\n};\n","import {DEFAULTS} from '../../index.js';\n\n/**\n * Abstract Hypercube.js mesh.\n * @example\n * class MeshExample extends Mesh {}\n */\nclass Mesh {\n\n    /**\n     * Stores the indices.\n     * @type {number[]}\n     * @protected\n     */\n    $indices;\n\n    /**\n     * Stores the material.\n     * @type {import('../../index.js').Material}\n     * @protected\n     */\n    $material;\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @protected\n     */\n    $name;\n\n    /**\n     * Stores the normals.\n     * @type {number[]}\n     * @protected\n     */\n    $normals;\n\n    /**\n     * Stores the positions.\n     * @type {number[]}\n     * @protected\n     */\n    $positions;\n\n    /**\n     * Stores the shadow casting status.\n     * @type {boolean}\n     * @protected\n     */\n    $shadowcasting;\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type;\n\n    /**\n     * Gets the indices.\n     * @type {number[]}\n     * @public\n     * @readonly\n     */\n    get indices() {\n\n        return this.$indices;\n    };\n\n    /**\n     * Gets the material.\n     * @type {import('../../index.js').Material}\n     * @public\n     * @readonly\n     */\n    get material() {\n\n        return this.$material;\n    }\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the normals.\n     * @type {number[]}\n     * @public\n     * @readonly\n     */\n    get normals() {\n\n        return this.$normals;\n    };\n\n    /**\n     * Gets the positions.\n     * @type {number[]}\n     * @public\n     * @readonly\n     */\n    get positions() {\n\n        return this.$positions;\n    };\n\n    /**\n     * Gets the shadowcasting status.\n     * @type {boolean}\n     * @public\n     * @readonly\n     */\n    get shadowcasting() {\n\n        return this.$shadowcasting;\n    };\n\n    /**\n     * Gets the type.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get type() {\n\n        return this.$type;\n    };\n\n    /**\n     * Creates a new Hypercube.js mesh.\n     * @param {string} [$name] The name of the mesh to create.\n     */\n    constructor($name = 'Mesh') {\n\n        this.$name = $name;\n\n        this.$material = DEFAULTS.material();\n        this.$shadowcasting = true;\n    }\n\n    /**\n     * Sets the material.\n     * @param {import('../../index.js').Material} $material The material to add.\n     * @public\n     */\n    setmaterial($material) {\n\n        this.$material = $material;\n    }\n\n    /**\n     * Sets the shadow casting status.\n     * @param {boolean} $shadowcasting The shadow casting status to set.\n     * @public\n     */\n    setshadowcasting($shadowcasting) {\n\n        this.$shadowcasting = $shadowcasting;\n    }\n}\n\nexport {\n\n    Mesh\n};\n\nexport default Mesh;\n","import {MATRIX4, QUATERNION, VECTOR3} from '../../index.js';\n\n/**\n * Creates Hypercube.js nodes.\n * @example\n * const node = new Node(name);\n */\nclass Node {\n\n    /**\n     * Stores the audio element.\n     * @type {HTMLAudioElement}\n     * @protected\n     */\n    $audio;\n\n    /**\n     * Stores the camera.\n     * @type {import('../../index.js').Camera}\n     * @private\n     */\n    $camera;\n\n    /**\n     * Stores the components of the node.\n     * @type {object}\n     * @private\n     */\n    $components;\n\n    /**\n     * Stores the world matrix of the node.\n     * @type {matrix4}\n     * @private\n     */\n    $matrix;\n\n    /**\n     * Stores the meshes.\n     * @type {import('../../index.js').Mesh[]}\n     * @private\n     */\n    $meshes;\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the child nodes.\n     * @type {Node[]}\n     * @private\n     */\n    $nodes;\n\n    /**\n     * Stores the parent node.\n     * @type {Node}\n     * @private\n     */\n    $parent;\n\n    /**\n     * Stores the script.\n     * @type {import('../../index.js').Script}\n     * @private\n     */\n    $script;\n\n    /**\n     * Stores the UUID.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the audio element.\n     * @type {HTMLAudioElement}\n     * @public\n     * @readonly\n     */\n    get audio() {\n\n        return this.$audio;\n    };\n\n    /**\n     * Gets the camera.\n     * @type {import('../../index.js').Camera}\n     * @public\n     * @readonly\n     */\n    get camera() {\n\n        return this.$camera;\n    }\n\n    /**\n     * Gets the world matrix of the node.\n     * @type {matrix4}\n     * @public\n     * @readonly\n     */\n    get matrix() {\n\n        return this.$matrix;\n    }\n\n    /**\n     * Gets the world matrix inverse of the node.\n     * @type {matrix4}\n     * @public\n     * @readonly\n     */\n    get matrixinverse() {\n\n        return MATRIX4.invert(this.$matrix);\n    }\n\n    /**\n     * Gets the meshes.\n     * @type {import('../../index.js').Mesh[]}\n     * @public\n     * @readonly\n     */\n    get meshes() {\n\n        return this.$meshes;\n    }\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the child nodes.\n     * @type {Node[]}\n     * @public\n     * @readonly\n     */\n    get nodes() {\n\n        return this.$nodes;\n    }\n\n    /**\n     * Gets the parent node.\n     * @type {Node}\n     * @public\n     * @readonly\n     */\n    get parent() {\n\n        return this.$parent;\n    }\n\n    /**\n     * Gets the orientation of the node.\n     * @type {quaternion}\n     * @public\n     * @readonly\n     */\n    get rotation() {\n\n        return MATRIX4.getrotation(this.$matrix);\n    }\n\n    /**\n     * Gets the script.\n     * @type {import('../../index.js').Script}\n     * @public\n     * @readonly\n     */\n    get script() {\n\n        return this.$script;\n    }\n\n    /**\n     * Gets the position of the node.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get translation() {\n\n        return MATRIX4.gettranslation(this.$matrix);\n    }\n\n    /**\n     * Gets the UUID.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new Hypercube.js node.\n     * @param {string} [$name] The name of the node.\n     */\n    constructor($name = 'Node') {\n\n        this.$name = $name;\n\n        this.$components = {};\n        this.$matrix = MATRIX4.identity();\n        this.$meshes = [];\n        this.$nodes = [];\n    }\n\n    /**\n     * Updates the world matrix of the child nodes.\n     * @param {matrix4} $matrixtransformation The transformation matrix to apply to children.\n     * @private\n     */\n    $updatechildren($matrixtransformation) {\n\n        this.nodes.forEach(($node) => {\n\n            $node.$matrix = MATRIX4.multiply($matrixtransformation, $node.$matrix);\n            $node.$updatechildren($matrixtransformation);\n        });\n    }\n\n    /**\n     * Adds a child node.\n     * @param {Node} $node The child node to add.\n     * @public\n     */\n    addchild($node) {\n\n        this.$nodes.push($node);\n\n        $node.setparent(this);\n    }\n\n    /**\n     * Adds a mesh.\n     * @param {import('../../index.js').Mesh} $mesh The mesh to add.\n     * @public\n     */\n    addmesh($mesh) {\n\n        this.$meshes.push($mesh);\n    }\n\n    /**\n     * Gets a component of the node.\n     * @param {string} $name The name of the component to get.\n     * return {any}\n     * @public\n     */\n    getcomponent($name) {\n\n        return this.$components[$name];\n    }\n\n    /**\n     * Checks if the node has given component.\n     * @param {string} $name The name of the component to check.\n     * return {boolean}\n     * @public\n     */\n    hascomponent($name) {\n\n        return this.$components.hasOwnProperty($name);\n    }\n\n    /**\n     * Looks at target position in the world space from a third person point of view.\n     * @param {vector3} $vector3target The target position to look at.\n     * @param {vector3} $vector3up The up vector.\n     * @public\n     */\n    lookat($vector3target, $vector3up) {\n\n        const matrix = MATRIX4.lookat(this.$matrix, $vector3target, $vector3up)\n\n        const transformation = MATRIX4.multiply(matrix, MATRIX4.invert(this.$matrix));\n\n        this.$matrix = matrix;\n\n        this.$updatechildren(transformation);\n    }\n\n    /**\n     * Removes a child node.\n     * @param {Node} $node The child node to remove.\n     * @public\n     */\n    removechild($node) {\n\n        this.$nodes.splice(this.$nodes.indexOf($node), 1);\n\n        $node.unsetparent();\n    }\n\n    /**\n     * Removes all child nodes.\n     * @public\n     */\n    removechildren() {\n\n        while (this.$nodes.length > 0) {\n\n            this.removechild(this.$nodes.shift());\n        }\n    }\n\n    /**\n     * Removes a component of the node.\n     * @param {string} $name The name of the component to remove.\n     * @public\n     */\n    removecomponent($name) {\n\n        delete this.$components[$name];\n    }\n\n    /**\n     * Rotates the node in the world space from a third person point of view.\n     * @param {quaternion} $quaternion The quaternion representing the rotation to apply.\n     * @public\n     */\n    rotate($quaternion) {\n\n        let matrix = MATRIX4.identity();\n\n        matrix = MATRIX4.translate(matrix, MATRIX4.gettranslation(this.$matrix));\n        matrix = MATRIX4.multiply(matrix, MATRIX4.fromquaternion(QUATERNION.normalize($quaternion)));\n        matrix = MATRIX4.multiply(matrix, MATRIX4.fromquaternion(MATRIX4.getrotation(this.$matrix)));\n\n        const transformation = MATRIX4.multiply(matrix, MATRIX4.invert(this.$matrix));\n\n        this.$matrix = matrix;\n\n        this.$updatechildren(transformation);\n    }\n\n    /**\n     * Rotates the node in the world space from a first person point of view.\n     * @param {quaternion} $quaternion The quaternion representing the rotation to apply.\n     * @public\n     */\n    rotateself($quaternion) {\n\n        const matrix = MATRIX4.multiply(this.$matrix, MATRIX4.fromquaternion(QUATERNION.normalize($quaternion)));\n\n        const transformation = MATRIX4.multiply(matrix, MATRIX4.invert(this.$matrix));\n\n        this.$matrix = matrix;\n\n        this.$updatechildren(transformation);\n    }\n\n    /**\n     * Sets the audio element.\n     * @param {HTMLAudioElement} $audio The audio element to set.\n     * @public\n     */\n    setaudio($audio) {\n\n        this.$audio = $audio;\n    }\n\n    /**\n     * Sets the camera.\n     * @param {import('../../index.js').Camera} $camera The camera to set.\n     * @public\n     */\n    setcamera($camera) {\n\n        this.$camera = $camera;\n    }\n\n    /**\n     * Sets a component of the node.\n     * @param {string} $name The name of the component to set.\n     * @param {any} $component The value of the component to set.\n     * @public\n     */\n    setcomponent($name, $component) {\n\n        this.$components[$name] = $component;\n    }\n\n    /**\n     * Sets the parent node.\n     * @param {Node} $node The parent node to set.\n     * @public\n     */\n    setparent($node) {\n\n        this.$parent = $node;\n    }\n\n    /**\n     * Sets the script of the node.\n     * @param {import('../../index.js').Script} $script The script to set.\n     * @public\n     */\n    setscript($script) {\n\n        this.$script = $script;\n    }\n\n    /**\n     * Sets the UUID of the node.\n     * @param {string} $uuid The UUID to set.\n     * @public\n     */\n    setuuid($uuid) {\n\n        this.$uuid = $uuid;\n    }\n\n    /**\n     * Translates the node in the world space from a third person point of view.\n     * @param {vector3} $vector3 The translation to apply.\n     * @public\n     */\n    translate($vector3) {\n\n        let matrix = MATRIX4.identity();\n\n        matrix = MATRIX4.translate(matrix, $vector3);\n        matrix = MATRIX4.translate(matrix, MATRIX4.gettranslation(this.$matrix));\n        matrix = MATRIX4.multiply(matrix, MATRIX4.fromquaternion(MATRIX4.getrotation(this.$matrix)));\n\n        const transformation = MATRIX4.multiply(matrix, MATRIX4.invert(this.$matrix));\n\n        this.$matrix = matrix;\n\n        this.$updatechildren(transformation);\n    }\n\n    /**\n     * Translates the node in the world space from a first person point of view.\n     * @param {vector3} $vector3 The translation to apply.\n     * @public\n     */\n    translateself($vector3) {\n\n        const matrix = MATRIX4.translate(this.$matrix, $vector3)\n\n        const transformation = MATRIX4.multiply(matrix, MATRIX4.invert(this.$matrix));\n\n        this.$matrix = matrix;\n\n        this.$updatechildren(transformation);\n    }\n\n    /**\n     * Translates the node in the world space to given position.\n     * @param {vector3} $vector3 The position to translate to.\n     * @public\n     */\n    translateto($vector3) {\n\n        this.translate(VECTOR3.subtract($vector3, MATRIX4.gettranslation(this.$matrix)));\n    }\n\n    /**\n     * Unsets the parent node.\n     * @public\n     */\n    unsetparent() {\n\n        delete this.$parent;\n    }\n}\n\nexport {\n\n    Node\n};\n\nexport default Node;\n","import {DEFAULTS, Script} from '../../index.js';\n\n/**\n * Creates Hypercube.js scenes.\n * @example\n * const scene = new Scene(name);\n */\nclass Scene {\n\n    /**\n     * Stores the anti-aliasing status.\n     * @type {boolean}\n     * @private\n     */\n    $antialiasing;\n\n    /**\n     * Stores the fog.\n     * @type {import('../../index.js').Fog}\n     * @private\n     */\n    $fog;\n\n    /**\n     * Stores the ambiant light.\n     * @type {import('../../index.js').LightAmbiant}\n     * @private\n     */\n    $lightambiant;\n\n    /**\n     * Stores the directional light.\n     * @type {import('../../index.js').LightDirectional}\n     * @private\n     */\n    $lightdirectional;\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the camera node.\n     * @type {import('../../index.js').Node}\n     * @private\n     */\n    $nodecamera;\n\n    /**\n     * Stores the root node.\n     * @type {import('../../index.js').Node}\n     * @private\n     */\n    $noderoot;\n\n    /**\n     * Stores the skybox.\n     * @type {import('../../index.js').Skybox}\n     * @private\n     */\n    $skybox;\n\n    /**\n     * Gets the anti-aliasing status.\n     * @type {boolean}\n     * @public\n     * @readonly\n     */\n    get antialiasing() {\n\n        return this.$antialiasing;\n    }\n\n    /**\n     * Gets the fog.\n     * @type {import('../../index.js').Fog}\n     * @public\n     * @readonly\n     */\n    get fog() {\n\n        return this.$fog;\n    }\n\n    /**\n     * Gets the ambiant light.\n     * @type {import('../../index.js').LightAmbiant}\n     * @public\n     * @readonly\n     */\n    get lightambiant() {\n\n        return this.$lightambiant;\n    }\n\n    /**\n     * Gets the directional light.\n     * @type {import('../../index.js').LightDirectional}\n     * @public\n     * @readonly\n     */\n    get lightdirectional() {\n\n        return this.$lightdirectional;\n    }\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the camera node.\n     * @type {import('../../index.js').Node}\n     * @public\n     * @readonly\n     */\n    get nodecamera() {\n\n        return this.$nodecamera;\n    }\n\n    /**\n     * Gets the root node.\n     * @type {import('../../index.js').Node}\n     * @public\n     * @readonly\n     */\n    get noderoot() {\n\n        return this.$noderoot;\n    }\n\n    /**\n     * Gets the skybox.\n     * @type {import('../../index.js').Skybox}\n     * @public\n     * @readonly\n     */\n    get skybox() {\n\n        return this.$skybox;\n    }\n\n    /**\n     * Creates a new Hypercube.js scene.\n     * @param {string} [$name] The name of the scene.\n     */\n    constructor($name = 'Scene') {\n\n        this.$name = $name;\n\n        this.$antialiasing = true;\n        this.$fog = DEFAULTS.foginvisible();\n        this.$lightambiant = DEFAULTS.lightambiant();\n        this.$lightdirectional = DEFAULTS.lightdirectional();\n        this.$noderoot = DEFAULTS.noderoot();\n        this.$nodecamera = DEFAULTS.nodecamera();\n        this.$skybox = DEFAULTS.skybox();\n    }\n\n    /**\n     * Gets a flat array of all the nodes in the hierarchical tree of given node.\n     * @param {import('../../index.js').Node} $node The reference node.\n     * @returns {import('../../index.js').Node[]}\n     * @public\n     */\n    getnodes($node) {\n\n        const nodes = [$node];\n\n        $node.nodes.forEach(($nodechild) => {\n\n            nodes.push(...this.getnodes($nodechild));\n        });\n\n        return nodes;\n    }\n\n    // @TODO\n    getnodesinradius($node, radius) {\n\n        //\n    }\n\n    /**\n     * Gets a flat array of all the nodes with an audio element in the hierarchical tree of given node.\n     * @param {import('../../index.js').Node} $node The reference node.\n     * @return {import('../../index.js').Node[]}\n     * @public\n     */\n    getnodeswithaudio($node) {\n\n        const nodes = [];\n\n        if ($node.audio instanceof HTMLAudioElement) {\n\n            nodes.push($node);\n        }\n\n        $node.nodes.forEach(($nodechild) => {\n\n            nodes.push(...this.getnodeswithaudio($nodechild));\n        });\n\n        return nodes;\n    }\n\n    /**\n     * Gets a flat array of all the nodes with given component name in the hierarchical tree of given node.\n     * @param {import('../../index.js').Node} $node The reference node.\n     * @param {string} $component The name of the component.\n     * @return {import('../../index.js').Node[]}\n     * @public\n     */\n    getnodeswithcomponent($node, $component) {\n\n        const nodes = [];\n\n        if ($node.hascomponent($component) === true) {\n\n            nodes.push($node);\n        }\n\n        $node.nodes.forEach(($nodechild) => {\n\n            nodes.push(...this.getnodeswithcomponent($nodechild, $component));\n        });\n\n        return nodes;\n    }\n\n    /**\n     * Gets a flat array of all the nodes with meshes in the hierarchical tree of given node.\n     * @param {import('../../index.js').Node} $node The reference node.\n     * @return {import('../../index.js').Node[]}\n     * @public\n     */\n    getnodeswithmesh($node) {\n\n        const meshes = [];\n\n        if ($node.meshes.length > 0) {\n\n            meshes.push($node);\n        }\n\n        $node.nodes.forEach(($nodechild) => {\n\n            meshes.push(...this.getnodeswithmesh($nodechild));\n        });\n\n        return meshes;\n    }\n\n    /**\n     * Gets a flat array of all the nodes with a script in the hierarchical tree of given node.\n     * @param {import('../../index.js').Node} $node The reference node.\n     * @return {import('../../index.js').Node[]}\n     * @public\n     */\n    getnodeswithscript($node) {\n\n        const nodes = [];\n\n        if ($node.script instanceof Script) {\n\n            nodes.push($node);\n        }\n\n        $node.nodes.forEach(($nodechild) => {\n\n            nodes.push(...this.getnodeswithscript($nodechild));\n        });\n\n        return nodes;\n    }\n\n    /**\n     * Sets the anti-aliasing status.\n     * @param {boolean} $antialiasing The anti-aliasing status to set.\n     * @public\n     */\n    setantialiasing($antialiasing) {\n\n        this.$antialiasing = $antialiasing;\n    }\n\n    /**\n     * Sets the fog.\n     * @param {import('../../index.js').Fog} $fog The fog to set.\n     * @public\n     */\n    setfog($fog) {\n\n        this.$fog = $fog;\n    }\n\n    /**\n     * Sets the ambiant light.\n     * @param {import('../../index.js').LightAmbiant} $lightambiant The ambiant light to set.\n     * @public\n     */\n    setlightambiant($lightambiant) {\n\n        this.$lightambiant = $lightambiant;\n    }\n\n    /**\n     * Sets the directional light.\n     * @param {import('../../index.js').LightDirectional} $lightdirectional The directional light to set.\n     * @public\n     */\n    setlightdirectional($lightdirectional) {\n\n        this.$lightdirectional = $lightdirectional;\n    }\n\n    /**\n     * Sets the camera node.\n     * @param {import('../../index.js').Node} $nodecamera The camera node to set.\n     * @public\n     */\n    setnodecamera($nodecamera) {\n\n        this.$nodecamera = $nodecamera;\n    }\n\n    /**\n     * Sets the root node.\n     * @param {import('../../index.js').Node} $noderoot The root node to set.\n     * @public\n     */\n    setnoderoot($noderoot) {\n\n        this.$noderoot = $noderoot;\n    }\n\n    /**\n     * Sets the skybox.\n     * @param {import('../../index.js').Skybox} $skybox The skybox to set.\n     * @public\n     */\n    setskybox($skybox) {\n\n        this.$skybox = $skybox;\n    }\n}\n\nexport {\n\n    Scene\n};\n\nexport default Scene;\n","/**\n * Abstract Hypercube.js script.\n * @example\n * class ScriptExample extends Script {}\n */\nclass Script {\n\n    /**\n     * Stores the Hypercube.js Game Engine running the script.\n     * @type {import('../../index.js').Engine}\n     * @protected\n     */\n    $engine;\n\n    /**\n     * Stores the running status of the script.\n     * @type {boolean}\n     * @protected\n     */\n    $running;\n\n    /**\n     * Gets the Hypercube.js Game Engine running the script.\n     * @type {import('../../index.js').Engine}\n     * @public\n     * @readonly\n     */\n    get engine() {\n\n        return this.$engine;\n    }\n\n    /**\n     * Gets the running status of the script.\n     * @type {boolean}\n     * @public\n     * @readonly\n     */\n    get running() {\n\n        return this.$running;\n    }\n\n    /**\n     * Gets the scene running.\n     * @type {import('../../index.js').Scene}\n     * @public\n     * @readonly\n     */\n    get scene() {\n\n        return this.$engine.scene;\n    }\n\n    /**\n     * Creates a new Hypercube.js script.\n     */\n    constructor() {\n\n        this.$running = false;\n    }\n\n    /**\n     * Called when a collision system detects a collision.\n     * @param {number} $timebeforecollision The elapsed time before the collision occurred.\n     * @param {import('../../index.js').Node} $entity The first node on which the script is attached.\n     * @param {import('../../index.js').Node} $other The second node on which the first has collide.\n     * @public\n     */\n    oncollide($timebeforecollision, $entity, $other) {}\n\n    /**\n     * Called when the node is destroyed.\n     * @param {import('../../index.js').Node} $entity The node on which the script is attached.\n     * @public\n     */\n    ondestroy($entity) {}\n\n    /**\n     * Called when an input system detects an input event.\n     * @param {import('../../index.js').Node} $entity The node on which the script is attached.\n     * @param {Event} $event The input event.\n     * @public\n     */\n    oninput($entity, $event) {}\n\n    /**\n     * Called when the node is started.\n     * @param {import('../../index.js').Node} $entity The node on which the script is attached.\n     * @public\n     */\n    onstart($entity) {}\n\n    /**\n     * Called when the node is updated by one tick update.\n     * @param {number} $timeframe The timeframe duration (in ms).\n     * @param {import('../../index.js').Node} $entity The node on which the script is attached.\n     * @public\n     */\n    ontick($timeframe, $entity) {}\n\n    /**\n     * Sets the Hypercube.js Game Engine running the script.\n     * @param {import('../../index.js').Engine} $engine The Hypercube.js Game Engine to set.\n     * @public\n     */\n    setengine($engine) {\n\n        this.$engine = $engine;\n        this.$running = true;\n    }\n}\n\nexport {\n\n    Script\n};\n\nexport default Script;\n","/**\n * Static Hypercube.js default shader sources.\n * @example\n * const sourcefragment = Shader.sourcefragment;\n * const sourcevertex = Shader.sourcevertex;\n */\nclass Shader {\n\n    /**\n     * Stores the attributes needed by the shader program.\n     * @type {Object<string, string>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static attributes = {};\n\n    /**\n     * Stores the fragment shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourcefragment = (\n\n        'void main(void) {}'\n    );\n\n    /**\n     * Stores the vertex shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourcevertex = (\n\n        'void main(void) {}'\n    );\n\n    /**\n     * Stores the uniforms needed by the shader program.\n     * @type {Object<string, string>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static uniforms = {};\n}\n\nexport {\n\n    Shader\n};\n\nexport default Shader;\n","import {VECTOR3} from '../../index.js';\n\n/**\n * Creates Hypercube.js skyboxes.\n * @example\n * const skybox = new Skybox(name, color);\n */\nclass Skybox {\n\n    /**\n     * Stores the color.\n     * @type {vector3}\n     * @protected\n     */\n    $color;\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Gets the color.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get color() {\n\n        return this.$color;\n    };\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Creates a new Hypercube.js skybox.\n     * @param {string} $name The name of the skybox.\n     * @param {vector3} $color The color of the skybox.\n     */\n    constructor($name, $color) {\n\n        this.$name = $name;\n        this.$color = VECTOR3.clone($color);\n    }\n}\n\nexport {\n\n    Skybox\n};\n\nexport default Skybox;\n","/**\n * Creates Hypercube.js state managers.\n * @template {any} Type The generic type of the data state.\n * @example\n * const state = new State(data);\n */\nclass State {\n\n    /**\n     * Stores the data state.\n     * @type {Type}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the state changing handlers.\n     * @type {Function[]}\n     * @private\n     */\n    $watchers;\n\n    /**\n     * Creates a new Hypercube.js state manager.\n     * @param {Type} $data The data state to store.\n     */\n    constructor($data) {\n\n        this.$data = $data;\n        this.$watchers = [];\n    }\n\n    /**\n     * Gets the data state.\n     * @returns {Type}\n     * @public\n     */\n    getstate() {\n\n        return this.$data;\n    }\n\n    /**\n     * Sets the data state.\n     * @param {Type} $data\n     * @public\n     */\n    setstate($data) {\n\n        this.$data = $data;\n\n        this.$watchers.forEach(($handler) => {\n\n            $handler();\n        });\n    }\n\n    /**\n     * Removes watchers of the data state changes using given handler.\n     * @param {Function} $handler The state changing handler to detach.\n     * @public\n     */\n    unwatchstate($handler) {\n\n        while (this.$watchers.indexOf($handler) !== -1) {\n\n            this.$watchers.splice(this.$watchers.indexOf($handler), 1);\n        }\n    }\n\n    /**\n     * Adds a watcher for the data state changes.\n     * @param {Function} $handler The state changing handler to attach.\n     * @public\n     */\n    watchstate($handler) {\n\n        this.$watchers.push($handler);\n    }\n}\n\nexport {\n\n    State\n};\n\nexport default State;\n","/**\n * Abstract Hypercube.js system.\n * @example\n * class SystemExample extends System {\n *\n *     tick($timeframe) {}\n * }\n */\nclass System {\n\n    /**\n     * Stores the Hypercube.js Game Engine running the system.\n     * @type {import('../../index.js').Engine}\n     * @protected\n     */\n    $engine;\n\n    /**\n     * Gets the Hypercube.js Game Engine running the system.\n     * @type {import('../../index.js').Engine}\n     * @public\n     * @readonly\n     */\n    get engine() {\n\n        return this.$engine;\n    }\n\n    /**\n     * Gets the scene running.\n     * @type {import('../../index.js').Scene}\n     * @public\n     * @readonly\n     */\n    get scene() {\n\n        return this.$engine.scene;\n    }\n\n    /**\n     * Destroys the system.\n     * @public\n     */\n    destroy() {}\n\n    /**\n     * Resizes the system.\n     * @public\n     */\n    resize() {}\n\n    /**\n     * Sets the Hypercube.js Game Engine running the system.\n     * @param {import('../../index.js').Engine} $engine The Hypercube.js Game Engine to set.\n     * @public\n     */\n    setengine($engine) {\n\n        this.$engine = $engine;\n    }\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {}\n\n    /**\n     * Updates the system once.\n     * @param {number} $timeframe The timeframe duration (in ms).\n     * @public\n     */\n    tick($timeframe) {}\n}\n\nexport {\n\n    System\n};\n\nexport default System;\n","import {Camera, MATRIX4} from '../../index.js';\n\n/**\n * Creates Hypercube.js orthographic cameras.\n * @example\n * const cameraorthographic = new CameraOrthographic(name, options);\n */\nclass CameraOrthographic extends Camera {\n\n    /**\n     * Stores the bottom bound of the frustum.\n     * @type {number}\n     * @private\n     */\n    $bottom;\n\n    /**\n     * Stores the far bound of the frustum.\n     * @type {number}\n     * @private\n     */\n    $far;\n\n    /**\n     * Stores the left bound of the frustum.\n     * @type {number}\n     * @private\n     */\n    $left;\n\n    /**\n     * Stores the near bound of the frustum.\n     * @type {number}\n     * @private\n     */\n    $near;\n\n    /**\n     * Stores the right bound of the frustum.\n     * @type {number}\n     * @private\n     */\n    $right;\n\n    /**\n     * Stores the top bound of the frustum.\n     * @type {number}\n     * @private\n     */\n    $top;\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type = 'camera.orthographic';\n\n    /**\n     * Gets the projection matrix of the camera.\n     * @type {matrix4}\n     * @public\n     * @readonly\n     */\n    get projection() {\n\n        return MATRIX4.orthographic(this.$left, this.$right, this.$bottom, this.$top, this.$near, this.$far);\n    }\n\n    /**\n     * Creates a new Hypercube.js orthographic camera.\n     * @param {string} $name The name of the orthographic camera.\n     * @param {object} $options The options of the orthographic camera.\n     * @param {number} $options.bottom The bottom bound of the frustum.\n     * @param {number} $options.far The far bound of the frustum.\n     * @param {number} $options.left The left bound of the frustum.\n     * @param {number} $options.near The near bound of the frustum.\n     * @param {number} $options.right The right bound of the frustum.\n     * @param {number} $options.top The top bound of the frustum.\n     */\n    constructor($name, $options) {\n\n        super($name);\n\n        this.$bottom = $options.bottom;\n        this.$far = $options.far;\n        this.$left = $options.left;\n        this.$near = $options.near;\n        this.$right = $options.right;\n        this.$top = $options.top;\n    }\n}\n\nexport {\n\n    CameraOrthographic\n};\n\nexport default CameraOrthographic;\n","import {Camera, CONSTANTS, MATRIX4} from '../../index.js';\n\n/**\n * Creates Hypercube.js perspective cameras.\n * @example\n * const cameraperspective = new CameraPerspective(name, options);\n */\nclass CameraPerspective extends Camera {\n\n    /**\n     * Stores the field of view in degrees.\n     * @type {number}\n     * @private\n     */\n    $angle;\n\n    /**\n     * Stores the distance to the far clipping plane.\n     * @type {number}\n     * @private\n     */\n    $far;\n\n    /**\n     * Stores the distance to the near clipping plane.\n     * @type {number}\n     * @private\n     */\n    $near;\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type = 'camera.perspective';\n\n    /**\n     * Gets the projection matrix of the camera.\n     * @type {matrix4}\n     * @public\n     * @readonly\n     */\n    get projection() {\n\n        return MATRIX4.perspective(this.$angle, this.$aspect, this.$near, this.$far);\n    }\n\n    /**\n     * Creates a new Hypercube.js perspective camera.\n     * @param {string} $name The name of the perspective camera.\n     * @param {object} $options The options of the perspective camera.\n     * @param {number} $options.angle The field of view in degrees.\n     * @param {number} $options.far The distance to the far clipping plane.\n     * @param {number} $options.near The distance to the near clipping plane.\n     */\n    constructor($name, $options) {\n\n        super($name);\n\n        this.$angle = $options.angle * CONSTANTS.RADIANS;\n        this.$aspect = 1;\n        this.$far = $options.far;\n        this.$near = $options.near;\n    }\n}\n\nexport {\n\n    CameraPerspective\n};\n\nexport default CameraPerspective;\n","/**\n * Creates viewers.\n * @example\n * const deviceviewer = new DeviceViewer();\n * const element = deviceviewer.element;\n */\nclass DeviceViewer {\n\n    /**\n     * Stores the aspect ratio.\n     * @type {number}\n     * @private\n     */\n    $aspect;\n\n    /**\n     * Stores the viewer container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the canvas element.\n     * @type {HTMLCanvasElement}\n     * @private\n     */\n    $element;\n\n    /**\n     * Gets the aspect ratio.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get aspect() {\n\n        return this.$aspect;\n    }\n\n    /**\n     * Gets the canvas element.\n     * @type {HTMLCanvasElement}\n     * @public\n     * @readonly\n     */\n    get element() {\n\n        return this.$element;\n    }\n\n    /**\n     * Creates a new viewer.\n     */\n    constructor() {\n\n        this.$element = document.createElement('canvas');\n\n        this.$element.style.width = '100%';\n        this.$element.style.height = '100%';\n        // this.$element.style.display = 'block';\n        this.$element.style.outline = '0';\n\n        this.setsize();\n    }\n\n    /**\n     * Appends the viewer to specified container.\n     * @param {HTMLElement} $container The container for the canvas element.\n     * @public\n     */\n    appendto($container) {\n\n        this.$container = $container;\n        this.$container.appendChild(this.$element);\n\n        this.setsize();\n    }\n\n    /**\n     * Sets focus on the canvas element.\n     * @public\n     */\n    focus() {\n\n        this.$element.setAttribute('tabindex', '0');\n        this.$element.focus();\n    }\n\n    /**\n     * Gets the device pixel ratio.\n     * @returns {number}\n     * @public\n     */\n    ratio() {\n\n        return window.devicePixelRatio || 1;\n    }\n\n    /**\n     * Sets the size of the viewer.\n     * @public\n     */\n    setsize() {\n\n        const ratio = this.ratio();\n\n        const width = Math.floor(this.$element.offsetWidth * ratio);\n        const height = Math.floor(this.$element.offsetHeight * ratio);\n\n        this.$element.setAttribute('width', '' + width);\n        this.$element.setAttribute('height', '' + height);\n\n        this.$aspect = this.$element.clientWidth / this.$element.clientHeight;\n    }\n}\n\nexport {\n\n    DeviceViewer\n};\n\nexport default DeviceViewer;\n","import {VECTOR3} from '../../index.js';\n\n/**\n * Creates Hypercube.js ambiant lights.\n * @example\n * const lightambiant = new LightAmbiant(name, color);\n */\nclass LightAmbiant {\n\n    /**\n     * Stores the color.\n     * @type {vector3}\n     * @protected\n     */\n    $color;\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type = 'light.ambiant';\n\n    /**\n     * Gets the color.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get color() {\n\n        return this.$color;\n    };\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Creates a new Hypercube.js ambiant light.\n     * @param {string} $name The name of the light.\n     * @param {vector3} $color The color of the light.\n     */\n    constructor($name, $color) {\n\n        this.$name = $name;\n        this.$color = VECTOR3.clone($color);\n    }\n}\n\nexport {\n\n    LightAmbiant\n};\n\nexport default LightAmbiant;\n","import {VECTOR3} from '../../index.js';\n\n/**\n * Creates Hypercube.js directional lights.\n * @example\n * const lightdirectional = new LightDirectional(name, direction, color);\n */\nclass LightDirectional {\n\n    /**\n     * Stores the color.\n     * @type {vector3}\n     * @protected\n     */\n    $color;\n\n    /**\n     * Stores the direction.\n     * @type {vector3}\n     * @protected\n     */\n    $direction;\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type = 'light.directional';\n\n    /**\n     * Gets the color.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get color() {\n\n        return this.$color;\n    };\n\n    /**\n     * Gets the direction.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get direction() {\n\n        return this.$direction;\n    };\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Creates a new Hypercube.js directional light.\n     * @param {string} $name The name of the light.\n     * @param {vector3} $direction The direction of the light.\n     * @param {vector3} $color The color of the light.\n     */\n    constructor($name, $direction, $color) {\n\n        this.$name = $name;\n        this.$direction = VECTOR3.clone($direction);\n        this.$color = VECTOR3.clone($color);\n    }\n}\n\nexport {\n\n    LightDirectional\n};\n\nexport default LightDirectional;\n","import {Material, VECTOR3} from '../../index.js';\n\n/**\n * Creates Hypercube.js color materials.\n * @example\n * const materialcolor = new MaterialColor(name, color);\n */\nclass MaterialColor extends Material {\n\n    /**\n     * Stores the color.\n     * @type {vector3}\n     * @protected\n     */\n    $color;\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type = 'material.color';\n\n    /**\n     * Gets the color.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get color() {\n\n        return this.$color;\n    };\n\n    // @TODO : replace {any} for $parameters\n\n    /**\n     * Creates a new Hypercube.js color material.\n     * @param {string} $name The name of the material.\n     * @param {any} [$parameters] The parameters of the material.\n     */\n    constructor($name, $parameters) {\n\n        super($name, $parameters);\n\n        this.$color = VECTOR3.clone($parameters.color);\n    }\n}\n\nexport {\n\n    MaterialColor\n};\n\nexport default MaterialColor;\n","import {Mesh, VECTOR3} from '../../index.js';\n\n/**\n * Creates Hypercube.js box meshes.\n * @example\n * const meshbox = new MeshBox(name, lengths);\n */\nclass MeshBox extends Mesh {\n\n    /**\n     * Stores the memoized data.\n     * @type {Object.<string, number[]>}\n     * @private\n     * @readonly\n     * @static\n     */\n    static $memory = {};\n\n    /**\n     * Stores the indices.\n     * @type {number[]}\n     * @protected\n     */\n    $indices = [\n\n        // -x face\n        0, 1, 2,\n        2, 3, 0,\n\n        // +x face\n        4, 5, 6,\n        6, 7, 4,\n\n        // -y face\n        8, 9, 10,\n        10, 11, 8,\n\n        // +y face\n        12, 13, 14,\n        14, 15, 12,\n\n        // -z face\n        16, 17, 18,\n        18, 19, 16,\n\n        // +z face\n        20, 21, 22,\n        22, 23, 20\n    ];\n\n    /**\n     * Stores the normals.\n     * @type {number[]}\n     * @protected\n     */\n    $normals = [\n\n        // -x face\n        -1, 0, 0,\n        -1, 0, 0,\n        -1, 0, 0,\n        -1, 0, 0,\n\n        // +x face\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n\n        // -y face\n        0, -1, 0,\n        0, -1, 0,\n        0, -1, 0,\n        0, -1, 0,\n\n        // +y face\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n\n        // -z face\n        0, 0, -1,\n        0, 0, -1,\n        0, 0, -1,\n        0, 0, -1,\n\n        // +z face\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1\n    ];\n\n    /**\n     * Creates a new Hypercube.js box mesh.\n     * @param {string} $name The name of the mesh to create.\n     * @param {vector3} $lengths The lengths of the box to create.\n     */\n    constructor($name, $lengths) {\n\n        super($name);\n\n        this.$type = 'mesh.box' + JSON.stringify($lengths);\n\n        if (MeshBox.$memory.hasOwnProperty(this.$type) === false) {\n\n            MeshBox.$memory[this.$type] = this.$createpositions(VECTOR3.clone($lengths));\n        }\n\n        this.$positions = [...MeshBox.$memory[this.$type]];\n    }\n\n    /**\n     * Creates the positions.\n     * @param {vector3} $lengths The lengths of the box to create.\n     * @returns {number[]}\n     * @private\n     */\n    $createpositions($lengths) {\n\n        const [xlength, ylength, zlength] = $lengths;\n\n        const xlengthhalved = xlength * 0.5;\n        const ylengthhalved = ylength * 0.5;\n        const zlengthhalved = zlength * 0.5;\n\n        return [\n\n            // -x face\n            - xlengthhalved, - ylengthhalved, - zlengthhalved,\n            - xlengthhalved, ylengthhalved, - zlengthhalved,\n            - xlengthhalved, ylengthhalved, zlengthhalved,\n            - xlengthhalved, - ylengthhalved, zlengthhalved,\n\n            // +x face\n            xlengthhalved, - ylengthhalved, - zlengthhalved,\n            xlengthhalved, - ylengthhalved, zlengthhalved,\n            xlengthhalved, ylengthhalved, zlengthhalved,\n            xlengthhalved, ylengthhalved, - zlengthhalved,\n\n            // -y face\n            - xlengthhalved, - ylengthhalved, - zlengthhalved,\n            - xlengthhalved, - ylengthhalved, zlengthhalved,\n            xlengthhalved, - ylengthhalved, zlengthhalved,\n            xlengthhalved, - ylengthhalved, - zlengthhalved,\n\n            // +y face\n            - xlengthhalved, ylengthhalved, - zlengthhalved,\n            xlengthhalved, ylengthhalved, - zlengthhalved,\n            xlengthhalved, ylengthhalved, zlengthhalved,\n            - xlengthhalved, ylengthhalved, zlengthhalved,\n\n            // -z face\n            - xlengthhalved, - ylengthhalved, - zlengthhalved,\n            xlengthhalved, - ylengthhalved, - zlengthhalved,\n            xlengthhalved, ylengthhalved, - zlengthhalved,\n            - xlengthhalved, ylengthhalved, - zlengthhalved,\n\n            // +z face\n            - xlengthhalved, - ylengthhalved, zlengthhalved,\n            - xlengthhalved, ylengthhalved, zlengthhalved,\n            xlengthhalved, ylengthhalved, zlengthhalved,\n            xlengthhalved, - ylengthhalved, zlengthhalved\n        ];\n    }\n}\n\nexport {\n\n    MeshBox\n};\n\nexport default MeshBox;\n","import {CONSTANTS, Mesh} from '../../index.js';\n\n/**\n * Creates Hypercube.js icosahedron meshes.\n * @example\n * const meshicosahedron = new MeshIcosahedron(name);\n */\nclass MeshIcosahedron extends Mesh {\n\n    /**\n     * Stores the golden ratio.\n     * @type {number}\n     * @protected\n     */\n    $phi = CONSTANTS.GOLDEN_RATIO;\n\n    /**\n     * Stores the inverse of the golden ratio.\n     * @type {number}\n     * @protected\n     */\n    $phiinverse = this.$phi - 1;\n\n    /**\n     * Stores the indices.\n     * @type {number[]}\n     * @protected\n     */\n    $indices = [\n\n        // -x faces\n        0, 1, 2,\n\n        3, 4, 5,\n\n        // +x faces\n        6, 7, 8,\n\n        9, 10, 11,\n\n        // -y faces\n        12, 13, 14,\n\n        15, 16, 17,\n\n        // +y faces\n        18, 19, 20,\n\n        21, 22, 23,\n\n        // -z faces\n        24, 25, 26,\n\n        27, 28, 29,\n\n        // +z faces\n        30, 31, 32,\n\n        33, 34, 35,\n\n        // -x/-y/-z face\n        36, 37, 38,\n\n        // +x/-y/-z face\n        39, 40, 41,\n\n        // -x/+y/-z face\n        42, 43, 44,\n\n        // +x/+y/-z face\n        45, 46, 47,\n\n        // -x/-y/+z face\n        48, 49, 50,\n\n        // +x/-y/+z face\n        51, 52, 53,\n\n        // -x/+y/+z face\n        54, 55, 56,\n\n        // +x/+y/+z face\n        57, 58, 59\n    ];\n\n    /**\n     * Stores the normals.\n     * @type {number[]}\n     * @protected\n     */\n    $normals = [\n\n        // -x faces\n        -(this.$phi + 1), 0, -1,\n        -(this.$phi + 1), 0, -1,\n        -(this.$phi + 1), 0, -1,\n\n        -(this.$phi + 1), 0, 1,\n        -(this.$phi + 1), 0, 1,\n        -(this.$phi + 1), 0, 1,\n\n        // +x faces\n        this.$phi + 1, 0, -1,\n        this.$phi + 1, 0, -1,\n        this.$phi + 1, 0, -1,\n\n        this.$phi + 1, 0, 1,\n        this.$phi + 1, 0, 1,\n        this.$phi + 1, 0, 1,\n\n        // -y faces\n        -1, -(this.$phi + 1), 0,\n        -1, -(this.$phi + 1), 0,\n        -1, -(this.$phi + 1), 0,\n\n        1, -(this.$phi + 1), 0,\n        1, -(this.$phi + 1), 0,\n        1, -(this.$phi + 1), 0,\n\n        // +y faces\n        -1, this.$phi + 1, 0,\n        -1, this.$phi + 1, 0,\n        -1, this.$phi + 1, 0,\n\n        1, this.$phi + 1, 0,\n        1, this.$phi + 1, 0,\n        1, this.$phi + 1, 0,\n\n        // -z faces\n        0, -1, -(this.$phi + 1),\n        0, -1, -(this.$phi + 1),\n        0, -1, -(this.$phi + 1),\n\n        0, 1, -(this.$phi + 1),\n        0, 1, -(this.$phi + 1),\n        0, 1, -(this.$phi + 1),\n\n        // +z faces\n        0, -1, this.$phi + 1,\n        0, -1, this.$phi + 1,\n        0, -1, this.$phi + 1,\n\n        0, 1, this.$phi + 1,\n        0, 1, this.$phi + 1,\n        0, 1, this.$phi + 1,\n\n        // -x/-y/-z face\n        -(this.$phi), -(this.$phi), -(this.$phi),\n        -(this.$phi), -(this.$phi), -(this.$phi),\n        -(this.$phi), -(this.$phi), -(this.$phi),\n\n        // +x/-y/-z face\n        this.$phi, -(this.$phi), -(this.$phi),\n        this.$phi, -(this.$phi), -(this.$phi),\n        this.$phi, -(this.$phi), -(this.$phi),\n\n        // -x/+y/-z face\n        -(this.$phi), this.$phi, -(this.$phi),\n        -(this.$phi), this.$phi, -(this.$phi),\n        -(this.$phi), this.$phi, -(this.$phi),\n\n        // +x/+y/-z face\n        this.$phi, this.$phi, -(this.$phi),\n        this.$phi, this.$phi, -(this.$phi),\n        this.$phi, this.$phi, -(this.$phi),\n\n        // -x/-y/+z face\n        -(this.$phi), -(this.$phi), this.$phi,\n        -(this.$phi), -(this.$phi), this.$phi,\n        -(this.$phi), -(this.$phi), this.$phi,\n\n        // +x/-y/+z face\n        this.$phi, -(this.$phi), this.$phi,\n        this.$phi, -(this.$phi), this.$phi,\n        this.$phi, -(this.$phi), this.$phi,\n\n        // -x/+y/+z face\n        -(this.$phi), this.$phi, this.$phi,\n        -(this.$phi), this.$phi, this.$phi,\n        -(this.$phi), this.$phi, this.$phi,\n\n        // +x/+y/+z face\n        this.$phi, this.$phi, this.$phi,\n        this.$phi, this.$phi, this.$phi,\n        this.$phi, this.$phi, this.$phi\n    ];\n\n    /**\n     * Stores the positions.\n     * @type {number[]}\n     * @protected\n     */\n    $positions = [\n\n        // -x faces\n        -1, -(this.$phiinverse), 0,\n        -(this.$phiinverse), 0, -1,\n        -1, this.$phiinverse, 0,\n\n        -1, -(this.$phiinverse), 0,\n        -1, this.$phiinverse, 0,\n        -(this.$phiinverse), 0, 1,\n\n        // +x faces\n        1, -(this.$phiinverse), 0,\n        1, this.$phiinverse, 0,\n        this.$phiinverse, 0, -1,\n\n        1, -(this.$phiinverse), 0,\n        this.$phiinverse, 0, 1,\n        1, this.$phiinverse, 0,\n\n        // -y faces\n        0, -1, -(this.$phiinverse),\n        -1, -(this.$phiinverse), 0,\n        0, -1, this.$phiinverse,\n\n        0, -1, -(this.$phiinverse),\n        0, -1, this.$phiinverse,\n        1, -(this.$phiinverse), 0,\n\n        // +y faces\n        0, 1, -(this.$phiinverse),\n        0, 1, this.$phiinverse,\n        -1, this.$phiinverse, 0,\n\n        0, 1, -(this.$phiinverse),\n        1, this.$phiinverse, 0,\n        0, 1, this.$phiinverse,\n\n        // -z faces\n        -(this.$phiinverse), 0, -1,\n        0, -1, -(this.$phiinverse),\n        this.$phiinverse, 0, -1,\n\n        -(this.$phiinverse), 0, -1,\n        this.$phiinverse, 0, -1,\n        0, 1, -(this.$phiinverse),\n\n        // +z faces\n        -(this.$phiinverse), 0, 1,\n        this.$phiinverse, 0, 1,\n        0, -1, this.$phiinverse,\n\n        -(this.$phiinverse), 0, 1,\n        0, 1, this.$phiinverse,\n        this.$phiinverse, 0, 1,\n\n        // -x/-y/-z face\n        -1, -(this.$phiinverse), 0,\n        0, -1, -(this.$phiinverse),\n        -(this.$phiinverse), 0, -1,\n\n        // +x/-y/-z face\n        1, -(this.$phiinverse), 0,\n        this.$phiinverse, 0, -1,\n        0, -1, -(this.$phiinverse),\n\n        // -x/+y/-z face\n        -1, this.$phiinverse, 0,\n        -(this.$phiinverse), 0, -1,\n        0, 1, -(this.$phiinverse),\n\n        // +x/+y/-z face\n        1, this.$phiinverse, 0,\n        0, 1, -(this.$phiinverse),\n        this.$phiinverse, 0, -1,\n\n        // -x/-y/+z face\n        -1, -(this.$phiinverse), 0,\n        -(this.$phiinverse), 0, 1,\n        0, -1, this.$phiinverse,\n\n        // +x/-y/+z face\n        1, -(this.$phiinverse), 0,\n        0, -1, this.$phiinverse,\n        this.$phiinverse, 0, 1,\n\n        // -x/+y/+z face\n        -1, this.$phiinverse, 0,\n        0, 1, this.$phiinverse,\n        -(this.$phiinverse), 0, 1,\n\n        // +x/+y/+z face\n        1, this.$phiinverse, 0,\n        this.$phiinverse, 0, 1,\n        0, 1, this.$phiinverse\n    ];\n\n    /**\n     * Stores the type.\n     * @type {string}\n     * @protected\n     */\n    $type = 'mesh.icosahedron';\n\n    /**\n     * Creates a new Hypercube.js icosahedron mesh.\n     * @param {string} $name The name of the mesh to create.\n     */\n    constructor($name) {\n\n        super($name);\n    }\n}\n\nexport {\n\n    MeshIcosahedron\n};\n\nexport default MeshIcosahedron;\n","import {Mesh} from '../../index.js';\n\n/**\n * Creates Hypercube.js plane meshes.\n * @example\n * const meshplane = new MeshPlane(name, lengths);\n */\nclass MeshPlane extends Mesh {\n\n    /**\n     * Stores the memoized data.\n     * @type {Object.<string, number[]>}\n     * @private\n     * @readonly\n     * @static\n     */\n    static $memory = {};\n\n    /**\n     * Stores the indices.\n     * @type {number[]}\n     * @protected\n     */\n    $indices = [\n\n        // -y face\n        0, 1, 2,\n        2, 3, 0,\n\n        // +y face\n        4, 5, 6,\n        6, 7, 4\n    ];\n\n    /**\n     * Stores the normals.\n     * @type {number[]}\n     * @protected\n     */\n    $normals = [\n\n        // -y face\n        0, -1, 0,\n        0, -1, 0,\n        0, -1, 0,\n        0, -1, 0,\n\n        // +y face\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0\n    ];\n\n    /**\n     * Creates a new Hypercube.js plane mesh.\n     * @param {string} $name The name of the mesh to create.\n     * @param {[number, number]} $lengths The lengths of the plane to create.\n     */\n    constructor($name, $lengths) {\n\n        super($name);\n\n        this.$type = 'mesh.plane' + JSON.stringify($lengths);\n\n        if (MeshPlane.$memory.hasOwnProperty(this.$type) === false) {\n\n            MeshPlane.$memory[this.$type] = this.$createpositions([...$lengths]);\n        }\n\n        this.$positions = [...MeshPlane.$memory[this.$type]];\n    }\n\n    /**\n     * Creates the positions.\n     * @param {[number, number]} $lengths The lengths of the plane to create.\n     * @returns {number[]}\n     * @private\n     */\n    $createpositions($lengths) {\n\n        const [xlength, zlength] = $lengths;\n\n        const xlengthhalved = xlength * 0.5;\n        const zlengthhalved = zlength * 0.5;\n\n        return [\n\n            // -y face\n            - xlengthhalved, 0, - zlengthhalved,\n            - xlengthhalved, 0, zlengthhalved,\n            xlengthhalved, 0, zlengthhalved,\n            xlengthhalved, 0, - zlengthhalved,\n\n            // +y face\n            - xlengthhalved, 0, - zlengthhalved,\n            xlengthhalved, 0, - zlengthhalved,\n            xlengthhalved, 0, zlengthhalved,\n            - xlengthhalved, 0, zlengthhalved\n        ];\n    }\n}\n\nexport {\n\n    MeshPlane\n};\n\nexport default MeshPlane;\n","import {Shader} from '../../index.js';\n\n/**\n * Static Hypercube.js depth shader sources.\n * @example\n * const sourcefragment = ShaderDepth.sourcefragment;\n * const sourcevertex = ShaderDepth.sourcevertex;\n */\nclass ShaderDepth extends Shader {\n\n    /**\n     * Stores the attributes needed by the shader program.\n     * @type {Object<string, string>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static attributes = {\n\n        'POSITION': 'vec3'\n    };\n\n    /**\n     * Stores the fragment shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourcefragment = (\n\n        'precision highp float;' +\n\n        'varying vec3 v_color;' +\n\n        'void main(void) {' +\n\n            'gl_FragColor = vec4(v_color, 1.0);' +\n        '}'\n    );\n\n    /**\n     * Stores the vertex shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourcevertex = (\n\n        'attribute vec3 POSITION;' +\n\n        'uniform mat4 projection;' +\n        'uniform mat4 transformation;' +\n        'uniform mat4 view;' +\n\n        'varying vec3 v_color;' +\n\n        'void main(void) {' +\n\n            'gl_Position = projection * view * transformation * vec4(POSITION, 1.0);' +\n\n            'v_color = vec3(gl_Position.z, 0.0, 0.0);' +\n        '}'\n    );\n\n    /**\n     * Stores the uniforms needed by the shader program.\n     * @type {Object<string, string>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static uniforms = {\n\n        'projection': 'mat4',\n        'transformation': 'mat4',\n        'view': 'mat4'\n    };\n}\n\nexport {\n\n    ShaderDepth\n};\n\nexport default ShaderDepth;\n","import {Shader} from '../../index.js';\n\n/**\n * Static Hypercube.js scene shader sources.\n * @example\n * const sourcefragment = ShaderScene.sourcefragment;\n * const sourcevertex = ShaderScene.sourcevertex;\n */\nclass ShaderScene extends Shader {\n\n    /**\n     * Stores the attributes needed by the shader program.\n     * @type {Object<string, string>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static attributes = {\n\n        'NORMAL': 'vec3',\n        'POSITION': 'vec3'\n    };\n\n    /**\n     * Stores the fragment shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourcefragment = (\n\n        'precision highp float;' +\n\n        'uniform vec3 colorfog;' +\n        'uniform float biasdepth;' +\n        'uniform float densityfog;' +\n        'uniform float distancefogbegin;' +\n        'uniform float distancefogmaximum;' +\n        'uniform sampler2D texturedepth;' +\n\n        'varying vec3 v_color;' +\n        'varying vec4 v_depth;' +\n        'varying vec3 v_light;' +\n        'varying vec4 v_position;' +\n\n        'bool shaded(in vec3 depth, in sampler2D texturedepth) {' +\n\n            'return depth.x >= 0.0' +\n            '&& depth.x <= 1.0' +\n            '&& depth.y >= 0.0' +\n            '&& depth.y <= 1.0' +\n            '&& texture2D(texturedepth, depth.xy).r <= depth.z + biasdepth;' +\n        '}' +\n\n        'void main(void) {' +\n\n            'float shadowratio = float(shaded(v_depth.xyz / v_depth.w, texturedepth));' +\n            'float lightratio = 1.0 - shadowratio;' +\n            'float fogratio = smoothstep(distancefogbegin, distancefogmaximum, length(v_position));' +\n\n            'gl_FragColor = mix(vec4(v_color + (v_light * lightratio), 1.0), vec4(colorfog, 1.0), fogratio * densityfog);' +\n        '}'\n    );\n\n    /**\n     * Stores the vertex shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourcevertex = (\n\n        'attribute vec3 NORMAL;' +\n        'attribute vec3 POSITION;' +\n\n        'uniform vec3 colorlightambiant;' +\n        'uniform vec3 colorlightdirectional;' +\n        'uniform vec3 colormaterial;' +\n        'uniform vec3 directionlightdirectional;' +\n        'uniform mat4 matrixdepth;' +\n        'uniform mat4 projection;' +\n        'uniform mat4 transformation;' +\n        'uniform mat4 view;' +\n\n        'varying vec3 v_color;' +\n        'varying vec4 v_depth;' +\n        'varying vec3 v_light;' +\n        'varying vec4 v_position;' +\n\n        'void main(void) {' +\n\n            'float illuminationlightdirectional = max(0.0, dot(-normalize(directionlightdirectional), normalize(mat3(transformation) * NORMAL)));' +\n\n            'v_color = colormaterial * colorlightambiant;' +\n            'v_depth = matrixdepth * transformation * vec4(POSITION, 1.0);' +\n            'v_light = colormaterial * colorlightdirectional * illuminationlightdirectional;' +\n            'v_position = projection * view * transformation * vec4(POSITION, 1.0);' +\n\n            'gl_Position = v_position;' +\n        '}'\n    );\n\n    /**\n     * Stores the uniforms needed by the shader program.\n     * @type {Object<string, string>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static uniforms = {\n\n        'biasdepth': 'float',\n        'colorfog': 'vec3',\n        'colorlightambiant': 'vec3',\n        'colorlightdirectional': 'vec3',\n        'colormaterial': 'vec3',\n        'densityfog': 'float',\n        'directionlightdirectional': 'vec3',\n        'distancefogbegin': 'float',\n        'distancefogmaximum': 'float',\n        'matrixdepth': 'mat4',\n        'projection': 'mat4',\n        'texturedepth': 'sampler2D',\n        'transformation': 'mat4',\n        'view': 'mat4'\n    };\n}\n\nexport {\n\n    ShaderScene\n};\n\nexport default ShaderScene;\n","import {AABB, CONSTANTS, COLLISION, Script, System, VECTOR3} from '../../index.js';\n\n/**\n * Creates Hypercube.js AABB collision systems.\n * @example\n * const systemcollisionaabb = new SystemCollisionAABB();\n *\n * // called by an update loop\n * systemcollisionaabb.tick();\n */\nclass SystemCollisionAABB extends System {\n\n    /**\n     * Creates a new Hypercube.js AABB collision system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Destroys the system.\n     * @public\n     */\n    destroy() {\n\n        console.log('Hypercube.js - AABB collision system - destroy()');\n    }\n\n    // @TODO\n    $distance([xa, ya, za], [xb, yb, zb]) {\n\n        return Math.abs(xa - xb) + Math.abs(ya - yb) + Math.abs(za - zb);\n\n        return Math.sqrt(\n            Math.pow(xa - xb, 2) + Math.pow(ya - yb, 2) + Math.pow(za - zb, 2)\n            )\n    }\n\n    /**\n     * Forwards the time from the previous state while performing continuous collision detection.\n     * @param {number} $timeelapsed The elapsed time since the last collision resolution.\n     * @private\n     */\n    $forward($timeelapsed) {\n\n        const nodes = this.scene.getnodeswithcomponent(this.scene.noderoot, 'collideraabb');\n\n        let pairs = [];\n\n        for (let currentindex = 0; currentindex < nodes.length; currentindex += 1) {\n\n            const current = nodes[currentindex];\n            const currentcomponentcollideraabb = current.getcomponent('collideraabb');\n\n            if (typeof currentcomponentcollideraabb === 'undefined') {\n\n                continue;\n            }\n\n            const currentcomponentbefore = current.getcomponent('before');\n\n            for (let otherindex = currentindex + 1; otherindex < nodes.length; otherindex += 1) {\n\n                const other = nodes[otherindex];\n                const othercomponentcollideraabb = other.getcomponent('collideraabb');\n\n                if (typeof othercomponentcollideraabb === 'undefined') {\n\n                    continue;\n                }\n\n                const othercomponentbefore = other.getcomponent('before');\n\n                if (currentcomponentcollideraabb.type === 'static'\n                && othercomponentcollideraabb.type === 'static') {\n\n                    continue;\n                }\n\n                const [xa, ya, za] = current.translation;\n                const [xb, yb, zb] = other.translation;\n\n                if (current.name !== 'plane1080x1080'   // @TODO : only for LD53\n                && other.name !== 'plane1080x1080'\n                && this.$distance([xa, ya, za], [xb, yb, zb]) > 3) {\n\n                    continue;\n                }\n\n                const currentaabbbefore = new AABB(\n\n                    VECTOR3.add(currentcomponentcollideraabb.min, currentcomponentbefore),\n                    VECTOR3.add(currentcomponentcollideraabb.max, currentcomponentbefore)\n                );\n\n                const currentaabbafter = new AABB(\n\n                    VECTOR3.add(currentcomponentcollideraabb.min, current.translation),\n                    VECTOR3.add(currentcomponentcollideraabb.max, current.translation)\n                );\n\n                const currentaabbswept = COLLISION.aabbminimumcontainer(currentaabbbefore, currentaabbafter);\n\n                const otheraabbbefore = new AABB(\n\n                    VECTOR3.add(othercomponentcollideraabb.min, othercomponentbefore),\n                    VECTOR3.add(othercomponentcollideraabb.max, othercomponentbefore)\n                );\n\n                const otheraabbafter = new AABB(\n\n                    VECTOR3.add(othercomponentcollideraabb.min, other.translation),\n                    VECTOR3.add(othercomponentcollideraabb.max, other.translation)\n                );\n\n                const otheraabbswept = COLLISION.aabbminimumcontainer(otheraabbbefore, otheraabbafter);\n\n                if (COLLISION.aabbcollidestrict(currentaabbswept, otheraabbswept) === false) {\n\n                    continue;\n                }\n\n                const timecollision = COLLISION.aabbsweptcollision(\n\n                    currentaabbbefore,\n                    currentaabbafter,\n                    otheraabbbefore,\n                    otheraabbafter\n                );\n\n                if (timecollision === 1) {\n\n                    continue;\n                }\n\n                const pair = {\n\n                    timecollision: timecollision,\n                    current: current,\n                    other: other,\n                };\n\n                pairs.push(pair);\n            }\n        }\n\n        if (pairs.length === 0) {\n\n            this.scene.getnodeswithcomponent(this.scene.noderoot, 'collideraabb').forEach(($current) => {\n\n                $current.setcomponent('before', VECTOR3.clone($current.translation));\n            });\n\n            return;\n        }\n\n        if (pairs.length > 1) {\n\n            pairs = pairs.sort(($a, $b) => {\n\n                return $a.timecollision - $b.timecollision;\n            });\n\n            pairs = pairs.filter(($a) => {\n\n                return $a.timecollision === pairs[0].timecollision;\n            });\n        }\n\n        const timecollision = Math.max(pairs[0].timecollision - CONSTANTS.PRECISION_EPSILON_8, 0);\n        const timebeforecollision = timecollision;\n        const timeaftercollision = 1 - timebeforecollision;\n\n        this.scene.getnodeswithcomponent(this.scene.noderoot, 'collideraabb').forEach(($current) => {\n\n            const componentbefore = $current.getcomponent('before');\n\n            const velocity = VECTOR3.subtract($current.translation, componentbefore);\n            const velocitybeforecollision = VECTOR3.multiplyscalar(velocity, timebeforecollision);\n            const translationbeforecollision = VECTOR3.add(componentbefore, velocitybeforecollision);\n\n            $current.setcomponent('before', translationbeforecollision);\n        });\n\n        pairs.forEach(($pair) => {\n\n            const {current, other} = $pair;\n\n            const currentcomponentbefore = current.getcomponent('before');\n            const othercomponentbefore = other.getcomponent('before');\n\n            const currentcomponentcollideraabb = current.getcomponent('collideraabb');\n            const othercomponentcollideraabb = other.getcomponent('collideraabb');\n\n            const currentvelocityreverse = VECTOR3.subtract(currentcomponentbefore, current.translation);\n            const othervelocityreverse = VECTOR3.subtract(othercomponentbefore, other.translation);\n\n            const currentvelocity = VECTOR3.subtract(current.translation, currentcomponentbefore);\n            const othervelocity = VECTOR3.subtract(other.translation, othercomponentbefore);\n\n            current.translate(currentvelocityreverse);\n            other.translate(othervelocityreverse);\n\n            const currentaabb = new AABB(\n\n                VECTOR3.add(currentcomponentcollideraabb.min, current.translation),\n                VECTOR3.add(currentcomponentcollideraabb.max, current.translation)\n            );\n\n            const otheraabb = new AABB(\n\n                VECTOR3.add(othercomponentcollideraabb.min, other.translation),\n                VECTOR3.add(othercomponentcollideraabb.max, other.translation)\n            );\n\n            const overlapx = COLLISION.aabboverlapstrictx(currentaabb, otheraabb);\n            const overlapy = COLLISION.aabboverlapstricty(currentaabb, otheraabb);\n            const overlapz = COLLISION.aabboverlapstrictz(currentaabb, otheraabb);\n\n            current.translate(\n\n                [\n                    overlapx === true ? currentvelocity[0] * timeaftercollision : 0,\n                    overlapy === true ? currentvelocity[1] * timeaftercollision : 0,\n                    overlapz === true ? currentvelocity[2] * timeaftercollision : 0\n                ]\n            );\n\n            other.translate(\n\n                [\n                    overlapx === true ? othervelocity[0] * timeaftercollision : 0,\n                    overlapy === true ? othervelocity[1] * timeaftercollision : 0,\n                    overlapz === true ? othervelocity[2] * timeaftercollision : 0\n                ]\n            );\n\n            if (current.script instanceof Script) {\n\n                current.script.oncollide($timeelapsed * timebeforecollision, current, other);\n            }\n\n            if (other.script instanceof Script) {\n\n                other.script.oncollide($timeelapsed * timebeforecollision, other, current);\n            }\n        });\n\n        this.$forward($timeelapsed * timeaftercollision);\n    }\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {\n\n        console.log('Hypercube.js - AABB collision system - start()');\n\n        this.scene.getnodeswithcomponent(this.scene.noderoot, 'collideraabb').forEach(($current) => {\n\n            $current.setcomponent('before', VECTOR3.clone($current.translation));\n        });\n    }\n\n    /**\n     * Updates the system once.\n     * @param {number} $timeframe The timeframe duration (in ms).\n     * @public\n     */\n    tick($timeframe) {\n\n        this.$forward($timeframe);\n    }\n}\n\nexport {\n\n    SystemCollisionAABB\n};\n\nexport default SystemCollisionAABB;\n","import {System} from '../../index.js';\n\n/**\n * Creates Hypercube.js input systems.\n * @example\n * const systeminput = new SystemInput();\n *\n * // called by an update loop\n * systeminput.tick();\n */\nclass SystemInput extends System {\n\n    /**\n     * Stores the input events.\n     * @type {Event[]}\n     * @private\n     */\n    $events;\n\n    /**\n     * Creates a new Hypercube.js input system.\n     */\n    constructor() {\n\n        super();\n\n        this.$events = [];\n    }\n\n    /**\n     * Stacks the input events for the next tick.\n     * @param {Event} $event The input event to stack.\n     * @private\n     */\n    $stack($event) {\n\n        // @TODO : uncomment\n        $event.preventDefault();\n\n        this.$events.push($event);\n    }\n\n    /**\n     * Destroys the system.\n     * @public\n     */\n    destroy() {\n\n        if (typeof this.engine.deviceviewer !== 'undefined') {\n\n            this.engine.deviceviewer.element.removeEventListener('blur', this.$stack.bind(this));\n            this.engine.deviceviewer.element.removeEventListener('contextmenu', this.$stack.bind(this));\n            this.engine.deviceviewer.element.removeEventListener('pointerdown', this.$stack.bind(this));\n            this.engine.deviceviewer.element.removeEventListener('pointerenter', this.$stack.bind(this));\n            this.engine.deviceviewer.element.removeEventListener('pointerleave', this.$stack.bind(this));\n            this.engine.deviceviewer.element.removeEventListener('pointermove', this.$stack.bind(this));\n            this.engine.deviceviewer.element.removeEventListener('pointerup', this.$stack.bind(this));\n            this.engine.deviceviewer.element.removeEventListener('wheel', this.$stack.bind(this));\n        }\n\n        document.removeEventListener('keydown', this.$stack.bind(this));\n        document.removeEventListener('keyup', this.$stack.bind(this));\n    }\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {\n\n        // @TODO : treat keyboard/gamepad/... events from top to bottom\n        // @TODO : treat pointer events on target (then delegate or bubble in cb)\n\n        if (typeof this.engine.deviceviewer !== 'undefined') {\n\n            // @TODO : tout dépend de deviceviewer ???\n            // @TODO : créer deviceinput ???\n            this.engine.deviceviewer.element.addEventListener('blur', this.$stack.bind(this));\n            this.engine.deviceviewer.element.addEventListener('contextmenu', this.$stack.bind(this));\n            this.engine.deviceviewer.element.addEventListener('pointerdown', this.$stack.bind(this));\n            this.engine.deviceviewer.element.addEventListener('pointerenter', this.$stack.bind(this));\n            this.engine.deviceviewer.element.addEventListener('pointerleave', this.$stack.bind(this));\n            this.engine.deviceviewer.element.addEventListener('pointermove', this.$stack.bind(this));\n            this.engine.deviceviewer.element.addEventListener('pointerup', this.$stack.bind(this));\n            this.engine.deviceviewer.element.addEventListener('wheel', this.$stack.bind(this));\n        }\n\n        document.addEventListener('keydown', this.$stack.bind(this));\n        document.addEventListener('keyup', this.$stack.bind(this));\n    }\n\n    /**\n     * Updates the system once.\n     * @param {number} $timeframe The timeframe duration (in ms).\n     * @public\n     */\n    tick($timeframe) {\n\n        while (this.$events.length > 0) {\n\n            const event = this.$events.shift();\n\n            this.scene.getnodeswithscript(this.scene.noderoot).forEach(($node) => {\n\n                $node.script.oninput($node, event);\n            });\n        }\n    }\n}\n\nexport {\n\n    SystemInput\n};\n\nexport default SystemInput;\n","import {CameraOrthographic, MATRIX4, MaterialColor, ShaderDepth, ShaderScene, System} from '../../index.js';\n\n/**\n * Creates Hypercube.js render systems.\n * @example\n * const systemrender = new SystemRender();\n *\n * // called by an update loop\n * systemrender.tick();\n */\nclass SystemRender extends System {\n\n    /**\n     * Stores the shader program attribute locations.\n     * @type {Object.<string, number>}\n     * @private\n     */\n    $attributelocations;\n\n    /**\n     * Stores the bias to apply to the the texture of the depth map.\n     * @type {number}\n     * @private\n     */\n    $biasdepth;\n\n    /**\n     * Stores the buffers to use by the shader program.\n     * @type {Object}\n     * @private\n     */\n    $buffers;\n\n    /**\n     * Stores the canvas element.\n     * @type {HTMLCanvasElement}\n     * @private\n     */\n    $canvas;\n\n    /**\n     * Stores the canvas context.\n     * @type {WebGL2RenderingContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the type of the current mesh bound to the shader program.\n     * @type {string}\n     * @private\n     */\n    $currentmeshtype;\n\n    /**\n     * Stores the framebuffer of the depth map.\n     * @type {WebGLFramebuffer}\n     * @private\n     */\n    $framebufferdepth;\n\n    /**\n     * Stores the depth shader program.\n     * @type {WebGLProgram}\n     * @private\n     */\n    $programdepth;\n\n    /**\n     * Stores the scene shader program.\n     * @type {WebGLProgram}\n     * @private\n     */\n    $programscene;\n\n    /**\n     * Stores the size of the texture of the depth map (for both width and height sizes).\n     * @type {number}\n     * @private\n     */\n    $sizetexturedepth;\n\n    /**\n     * Stores the half-size of the cube containing the depth map.\n     * @type {number}\n     * @private\n     */\n    $sizehalvedcubedepthmap;\n\n    /**\n     * Stores the texture of the depth map.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $texturedepth;\n\n    /**\n     * Stores the shader program uniform locations.\n     * @type {Object.<string, WebGLUniformLocation>}\n     * @private\n     */\n    $uniformlocations;\n\n    /**\n     * Creates a new Hypercube.js render system.\n     * @param {number} [$sizehalvedcubedepthmap] The half-size of the cube containing the depth map.\n     * @param {number} [$sizetexturedepth] The size of the texture of the depth map (for both width and height sizes).\n     * @param {number} [$biasdepth] The bias to apply to the the texture of the depth map.\n     */\n    constructor($sizehalvedcubedepthmap = 32, $sizetexturedepth = 4096, $biasdepth = 0) {\n\n        super();\n\n        this.$attributelocations = {};\n        this.$biasdepth = $biasdepth;\n        this.$buffers = {};\n        this.$sizehalvedcubedepthmap = $sizehalvedcubedepthmap;\n        this.$sizetexturedepth = $sizetexturedepth;\n        this.$uniformlocations = {};\n    }\n\n    /**\n     * Creates the attributes locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof import('../../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createattributelocations($program, $shader) {\n\n        Object.keys($shader.attributes).forEach(($name) => {\n\n            this.$attributelocations[$name] = this.$context.getAttribLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the buffers to use by the shader program for given mesh.\n     * @param {import('../../index.js').Mesh} $mesh The reference mesh.\n     * @private\n     */\n    $createbuffers($mesh) {\n\n        const buffernormal = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, buffernormal);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array($mesh.normals), this.$context.STATIC_DRAW);\n\n        const bufferposition = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferposition);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array($mesh.positions), this.$context.STATIC_DRAW);\n\n        const bufferindex = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ELEMENT_ARRAY_BUFFER, bufferindex);\n        this.$context.bufferData(this.$context.ELEMENT_ARRAY_BUFFER, new Uint32Array($mesh.indices), this.$context.STATIC_DRAW);\n\n        this.$buffers[$mesh.type] = {\n\n            'normal': buffernormal,\n            'position': bufferposition,\n            'index': bufferindex\n        };\n    }\n\n    /**\n     * Creates the depth shader program.\n     * @param {typeof import('../../index.js').Shader} $shader The representation of the depth shader.\n     * @private\n     */\n    $createprogramdepth($shader) {\n\n        const shadervertex = this.$context.createShader(this.$context.VERTEX_SHADER);\n        this.$context.shaderSource(shadervertex, $shader.sourcevertex);\n        this.$context.compileShader(shadervertex);\n\n        const shaderfragment = this.$context.createShader(this.$context.FRAGMENT_SHADER);\n        this.$context.shaderSource(shaderfragment, $shader.sourcefragment);\n        this.$context.compileShader(shaderfragment);\n\n        this.$programdepth = this.$context.createProgram();\n        this.$context.attachShader(this.$programdepth, shadervertex);\n        this.$context.attachShader(this.$programdepth, shaderfragment);\n        this.$context.linkProgram(this.$programdepth);\n    }\n\n    /**\n     * Creates the scene shader program.\n     * @param {typeof import('../../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createprogramscene($shader) {\n\n        const shadervertex = this.$context.createShader(this.$context.VERTEX_SHADER);\n        this.$context.shaderSource(shadervertex, $shader.sourcevertex);\n        this.$context.compileShader(shadervertex);\n\n        const shaderfragment = this.$context.createShader(this.$context.FRAGMENT_SHADER);\n        this.$context.shaderSource(shaderfragment, $shader.sourcefragment);\n        this.$context.compileShader(shaderfragment);\n\n        this.$programscene = this.$context.createProgram();\n        this.$context.attachShader(this.$programscene, shadervertex);\n        this.$context.attachShader(this.$programscene, shaderfragment);\n        this.$context.linkProgram(this.$programscene);\n    }\n\n    /**\n     * Creates the uniform locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof import('../../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createuniformlocations($program, $shader) {\n\n        Object.keys($shader.uniforms).forEach(($name) => {\n\n            this.$uniformlocations[$name] = this.$context.getUniformLocation($program, $name);\n        });\n    }\n\n    /**\n     * Prepares the the depth map.\n     * @param {number} $width The width of the texture of the depth map.\n     * @param {number} $height The height of the texture of the depth map.\n     * @private\n     */\n    $preparedepthmap($width, $height) {\n\n        this.$framebufferdepth = this.$context.createFramebuffer();\n        this.$context.bindFramebuffer(this.$context.FRAMEBUFFER, this.$framebufferdepth);\n\n        this.$texturedepth = this.$context.createTexture();\n        this.$context.bindTexture(this.$context.TEXTURE_2D, this.$texturedepth);\n\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MIN_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MAG_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_S, this.$context.CLAMP_TO_EDGE);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_T, this.$context.CLAMP_TO_EDGE);\n\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.DEPTH_COMPONENT32F, $width, $height, 0, this.$context.DEPTH_COMPONENT, this.$context.FLOAT, null);\n        this.$context.framebufferTexture2D(this.$context.FRAMEBUFFER, this.$context.DEPTH_ATTACHMENT, this.$context.TEXTURE_2D, this.$texturedepth, 0);\n\n        this.$context.bindTexture(this.$context.TEXTURE_2D, null);\n        this.$context.bindFramebuffer(this.$context.FRAMEBUFFER, null);\n    }\n\n    /**\n     * Resets the canvas.\n     * @param {number} $width The context viewport width.\n     * @param {number} $height The context viewport height.\n     * @param {vector3} $color The context background color.\n     * @private\n     */\n    $resetcanvas($width, $height, $color) {\n\n        const [colorred, colorgreen, colorblue] = $color;\n\n        this.$context.clearColor(colorred, colorgreen, colorblue, 1.0);\n        this.$context.clearDepth(1.0);\n\n        this.$context.viewport(0.0, 0.0, $width, $height);\n        this.$context.clear(this.$context.COLOR_BUFFER_BIT | this.$context.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Sends an attribute to the shader program.\n     * @param {typeof import('../../index.js').Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the attribute.\n     * @param {any} $value The value of the attribute.\n     * @private\n     */\n    $sendattribute($shader, $name, $value) {\n\n        if (typeof $shader.attributes[$name] === 'undefined') {\n\n            return;\n        }\n\n        const attributetype = $shader.attributes[$name];\n\n        if (attributetype === 'vec3') {\n\n            this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n            const attributelocation = this.$attributelocations[$name];\n            this.$context.vertexAttribPointer(attributelocation, 3, this.$context.FLOAT, false, 0, 0);\n            this.$context.enableVertexAttribArray(attributelocation);\n\n            return;\n        }\n    }\n\n    /**\n     * Sends a uniform to the shader program.\n     * @param {typeof import('../../index.js').Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the uniform.\n     * @param {any} $value The value of the uniform.\n     * @private\n     */\n    $senduniform($shader, $name, $value) {\n\n        if (typeof $shader.uniforms[$name] === 'undefined') {\n\n            return;\n        }\n\n        const uniformtype = $shader.uniforms[$name];\n\n        if (uniformtype === 'float') {\n\n            this.$context.uniform1f(this.$uniformlocations[$name], $value);\n\n            return;\n        }\n\n        if (uniformtype === 'mat4') {\n\n            this.$context.uniformMatrix4fv(this.$uniformlocations[$name], false, $value);\n\n            return;\n        }\n\n        if (uniformtype === 'sampler2D') {\n\n            this.$context.uniform1i(this.$uniformlocations[$name], $value);\n\n            return;\n        }\n\n        if (uniformtype === 'vec3') {\n\n            this.$context.uniform3fv(this.$uniformlocations[$name], $value);\n\n            return;\n        }\n    }\n\n    /**\n     * Destroys the system.\n     * @public\n     */\n    destroy() {\n\n        if (typeof this.engine.deviceviewer === 'undefined') {\n\n            return;\n        }\n\n        this.$context.getExtension('WEBGL_lose_context').loseContext();\n    }\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {\n\n        if (typeof this.engine.deviceviewer === 'undefined') {\n\n            return;\n        }\n\n        this.$canvas = this.engine.deviceviewer.element;\n\n        this.$context = this.$canvas.getContext('webgl2', {\n\n            'antialias': this.scene.antialiasing\n        });\n\n        this.$context.enable(this.$context.DEPTH_TEST);\n        this.$context.enable(this.$context.CULL_FACE);\n        this.$context.cullFace(this.$context.FRONT);\n\n        this.$preparedepthmap(this.$sizetexturedepth, this.$sizetexturedepth);\n        this.$createprogramdepth(ShaderDepth);\n        this.$createprogramscene(ShaderScene);\n\n        this.scene.getnodeswithmesh(this.scene.noderoot).forEach(($node) => {\n\n            $node.meshes.forEach(($mesh) => {\n\n                if (typeof this.$buffers[$mesh.type] === 'undefined') {\n\n                    this.$createbuffers($mesh);\n                }\n            });\n        });\n    }\n\n    /**\n     * Updates the system once.\n     * @param {number} $timeframe The timeframe duration (in ms).\n     * @public\n     */\n    tick($timeframe) {\n\n        if (typeof this.engine.deviceviewer === 'undefined') {\n\n            return;\n        }\n\n        this.$context.bindFramebuffer(this.$context.FRAMEBUFFER, this.$framebufferdepth);\n\n        this.$resetcanvas(this.$sizetexturedepth, this.$sizetexturedepth, [0.0, 0.0, 0.0]);\n\n        this.$context.useProgram(this.$programdepth);\n\n        this.$createuniformlocations(this.$programdepth, ShaderDepth);\n        this.$createattributelocations(this.$programdepth, ShaderDepth);\n\n        const camera = new CameraOrthographic('frontfar', {\n\n            'left': - this.$sizehalvedcubedepthmap,\n            'right': this.$sizehalvedcubedepthmap,\n            'bottom': - this.$sizehalvedcubedepthmap,\n            'top': this.$sizehalvedcubedepthmap,\n            'near': - this.$sizehalvedcubedepthmap,\n            'far': this.$sizehalvedcubedepthmap\n        });\n\n        const matrixcamera = MATRIX4.invert(MATRIX4.lookat(MATRIX4.identity(), this.scene.lightdirectional.direction, [0, 1, 0]));\n\n        this.$senduniform(ShaderDepth, 'projection', camera.projection);\n        this.$senduniform(ShaderDepth, 'view', matrixcamera);\n\n        this.scene.getnodeswithmesh(this.scene.noderoot).forEach(($node) => {\n\n            $node.meshes.forEach(($mesh) => {\n\n                if ($mesh.shadowcasting === false) {\n\n                    return;\n                }\n\n                this.$senduniform(ShaderDepth, 'transformation', $node.matrix);\n\n                if ($mesh.type !== this.$currentmeshtype) {\n\n                    if (typeof this.$buffers[$mesh.type] === 'undefined') {\n\n                        this.$createbuffers($mesh);\n                    }\n\n                    this.$currentmeshtype = $mesh.type;\n\n                    this.$sendattribute(ShaderDepth, 'POSITION', this.$buffers[$mesh.type].position);\n\n                    this.$context.bindBuffer(this.$context.ELEMENT_ARRAY_BUFFER, this.$buffers[$mesh.type].index);\n                }\n\n                this.$context.drawElements(this.$context.TRIANGLES, $mesh.indices.length, this.$context.UNSIGNED_INT, 0);\n            });\n        });\n\n        this.$context.bindFramebuffer(this.$context.FRAMEBUFFER, null);\n\n        delete this.$currentmeshtype;\n\n        const matrixdepth = MATRIX4.multiply(MATRIX4.multiply(MATRIX4.scale(MATRIX4.translate(MATRIX4.identity(), [0.5, 0.5, 0.5]), [0.5, 0.5, 0.5]), camera.projection), matrixcamera);\n\n        this.$resetcanvas(this.$canvas.width, this.$canvas.height, this.scene.skybox.color);\n\n        this.$context.useProgram(this.$programscene);\n\n        this.$createuniformlocations(this.$programscene, ShaderScene);\n        this.$createattributelocations(this.$programscene, ShaderScene);\n\n        this.scene.nodecamera.camera.setaspect(this.$engine.deviceviewer.aspect);\n\n        this.$senduniform(ShaderScene, 'biasdepth', this.$biasdepth);\n        this.$senduniform(ShaderScene, 'colorfog', this.scene.fog.color);\n        this.$senduniform(ShaderScene, 'colorlightambiant', this.scene.lightambiant.color);\n        this.$senduniform(ShaderScene, 'colorlightdirectional', this.scene.lightdirectional.color);\n        this.$senduniform(ShaderScene, 'densityfog', this.scene.fog.density);\n        this.$senduniform(ShaderScene, 'directionlightdirectional', this.scene.lightdirectional.direction);\n        this.$senduniform(ShaderScene, 'distancefogbegin', this.scene.fog.distancefogbegin);\n        this.$senduniform(ShaderScene, 'distancefogmaximum', this.scene.fog.distancefogmaximum);\n        this.$senduniform(ShaderScene, 'matrixdepth', matrixdepth);\n        this.$senduniform(ShaderScene, 'projection', this.scene.nodecamera.camera.projection);\n        this.$senduniform(ShaderScene, 'view', this.scene.nodecamera.matrixinverse);\n\n        const textureunit = 0;\n\n        this.$senduniform(ShaderScene, 'texturedepth', textureunit);\n        this.$context.activeTexture(this.$context.TEXTURE0 + textureunit);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, this.$texturedepth);\n\n        this.scene.getnodeswithmesh(this.scene.noderoot).forEach(($node) => {\n\n            $node.meshes.forEach(($mesh) => {\n\n                if ($mesh.material instanceof MaterialColor) {\n\n                    this.$senduniform(ShaderScene, 'colormaterial', $mesh.material.color);\n                }\n\n                this.$senduniform(ShaderScene, 'transformation', $node.matrix);\n\n                if ($mesh.type !== this.$currentmeshtype) {\n\n                    if (typeof this.$buffers[$mesh.type] === 'undefined') {\n\n                        this.$createbuffers($mesh);\n                    }\n\n                    this.$currentmeshtype = $mesh.type;\n\n                    this.$sendattribute(ShaderScene, 'NORMAL', this.$buffers[$mesh.type].normal);\n                    this.$sendattribute(ShaderScene, 'POSITION', this.$buffers[$mesh.type].position);\n\n                    this.$context.bindBuffer(this.$context.ELEMENT_ARRAY_BUFFER, this.$buffers[$mesh.type].index);\n                }\n\n                this.$context.drawElements(this.$context.TRIANGLES, $mesh.indices.length, this.$context.UNSIGNED_INT, 0);\n            });\n        });\n\n        this.$context.bindTexture(this.$context.TEXTURE_2D, null);\n\n        delete this.$currentmeshtype;\n    }\n}\n\nexport {\n\n    SystemRender\n};\n\nexport default SystemRender;\n","import {Script, System} from '../../index.js';\n\n/**\n * Creates Hypercube.js script systems.\n * @example\n * const systemscript = new SystemScript();\n *\n * // called by an update loop\n * systemscript.tick(timeframe);\n */\nclass SystemScript extends System {\n\n    /**\n     * Creates a new Hypercube.js script system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Destroys the system.\n     * @public\n     */\n    destroy() {\n\n        this.scene.getnodes(this.scene.noderoot).forEach(($current) => {\n\n            const script = $current.script;\n\n            if (!(script instanceof Script)) {\n\n                return;\n            }\n\n            if (script.running === false) {\n\n                script.setengine(this.engine);\n                script.onstart($current);\n            }\n\n            script.ondestroy($current);\n        });\n    }\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {\n\n        this.scene.getnodes(this.scene.noderoot).forEach(($current) => {\n\n            const script = $current.script;\n\n            if (!(script instanceof Script)) {\n\n                return;\n            }\n\n            if (script.running === false) {\n\n                script.setengine(this.engine);\n                script.onstart($current);\n            }\n        });\n    }\n\n    /**\n     * Updates the system once.\n     * @param {number} $timeframe The timeframe duration (in ms).\n     * @public\n     */\n    tick($timeframe) {\n\n        this.scene.getnodes(this.scene.noderoot).forEach(($current) => {\n\n            const script = $current.script;\n\n            if (!(script instanceof Script)) {\n\n                return;\n            }\n\n            if (script.running === false) {\n\n                script.setengine(this.engine);\n                script.onstart($current);\n            }\n\n            script.ontick($timeframe, $current);\n        });\n    }\n}\n\nexport {\n\n    SystemScript\n};\n\nexport default SystemScript;\n","import {System} from '../../index.js';\n\n/**\n * Creates Hypercube.js audio spatialization systems.\n * @example\n * const systemspatialization = new SystemSpatialization();\n *\n * // called by an update loop\n * systemspatialization.tick(timeframe);\n */\nclass SystemSpatialization extends System {\n\n    /**\n     * The audio context.\n     * @type {AudioContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * The audio listener representing the person listening to the spatial audio.\n     * @type {AudioListener}\n     * @private\n     */\n    $listener;\n\n    // @TODO\n    $map;\n\n    /**\n     * The common PannerNode options used by the system.\n     * @type {PannerOptions}\n     * @private\n     */\n    $panneroptions = {\n\n        'channelCount': undefined,\n        'channelCountMode': undefined,\n        'channelInterpretation': undefined,\n        'coneInnerAngle': 360,\n        'coneOuterAngle': 360,\n        'coneOuterGain': 0.0,\n        'distanceModel': 'linear', // @TODO : only for LD53\n        'maxDistance': 32, // @TODO : only for LD53\n        'orientationX': 0.0,\n        'orientationY': 1.0,\n        'orientationZ': 0.0,\n        'panningModel': 'HRTF',\n        'positionX': 0,\n        'positionY': 0,\n        'positionZ': 0,\n        'refDistance': 4,\n        'rolloffFactor': 2\n    };\n\n    /**\n     * Creates a new Hypercube.js audio spatialization system.\n     */\n    constructor() {\n\n        super();\n\n        this.$map = [];\n    }\n\n    /**\n     * Destroys the system.\n     * @public\n     */\n    destroy() {\n\n        this.$context.close();\n    }\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {\n\n        this.$context = new window.AudioContext();\n        this.$listener = this.$context.listener;\n\n        // @TODO : faire pareil au tick() pour vérifier l'existance et créer un panner lorsqu'une nouvelle entité est créée !!!\n        this.scene.getnodeswithaudio(this.scene.noderoot).forEach(($current) => {\n\n            const [x, y, z] = $current.translation;\n\n            const panner = new PannerNode(this.$context, this.$panneroptions);\n\n            panner.setPosition(x, y, z);\n\n            const audio = $current.audio;\n            const track = this.$context.createMediaElementSource(audio);\n\n            track.connect(panner).connect(this.$context.destination);\n\n            this.$map.push({\n\n                'entity': $current,\n                'panner': panner,\n                'track': track\n            });\n        });\n    }\n\n    /**\n     * Updates the system once.\n     * @param {number} $timeframe The timeframe duration (in ms).\n     * @public\n     */\n    tick($timeframe) {\n\n        const nodes = this.scene.getnodeswithaudio(this.scene.noderoot);\n\n        nodes.forEach(($current) => {\n\n            let pair = this.$map.find(($pair) => {\n\n                return $pair.entity === $current;\n            });\n\n            if (typeof pair === 'undefined') {\n\n                // @TODO : signifie que l'entité est nouvelle est n'a pas encore de panner de créé\n\n                console.log('here');\n\n                const [x, y, z] = $current.translation;\n\n                const panner = new PannerNode(this.$context, this.$panneroptions);\n\n                panner.setPosition(x, y, z);\n\n                const audio = $current.audio;\n                const track = this.$context.createMediaElementSource(audio);\n\n                track.connect(panner).connect(this.$context.destination);\n\n                pair = {\n\n                    'entity': $current,\n                    'panner': panner,\n                    'track': track\n                };\n\n                this.$map.push(pair);\n\n                return;\n            }\n\n            const [x, y, z] = $current.translation;\n\n            pair.panner.setPosition(x, y, z);\n        });\n\n        // @HERE : on clean les anciennes pairs (entities qui ne sont plus dans le node graph)\n        this.$map = this.$map.filter(($pair, $index) => {\n\n            const {entity, panner, track} = $pair;\n\n            if (nodes.indexOf(entity) === -1) {\n\n                track.disconnect();\n                // panner.disconnect();\n\n                return false;\n            }\n\n            return true;\n        });\n\n        // console.log(this.$map)\n\n        const [translationx, translationy, translationz] = this.scene.nodecamera.translation;\n\n        const cameramatrix = this.scene.nodecamera.matrix;\n\n        const orientationx = cameramatrix[2];\n        const orientationy = cameramatrix[6];\n        const orientationz = - cameramatrix[10];\n\n        const upx = 0;\n        const upy = 1;\n        const upz = 0;\n\n        this.$listener.setPosition(translationx, translationy, translationz);\n        this.$listener.setOrientation(orientationx, orientationy, orientationz, upx, upy, upz);\n    }\n}\n\nexport {\n\n    SystemSpatialization\n};\n\nexport default SystemSpatialization;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * @typedef {object} typegame\n * @property {boolean} typegame.light\n * @property {boolean} typegame.mountain\n * @property {boolean} typegame.sky\n * @property {boolean} typegame.temple\n * @property {boolean} typegame.tree\n */\n\n/**\n * The game data.\n * @type {typegame}\n * @constant\n */\nconst game = {\n\n    'light': false,\n    'sky': false,\n\n    'mountain': false,\n    'temple': false,\n    'tree': false,\n};\n\n/**\n * The state manager of the game data.\n * @type {import('@hypercubejs/hypercubejs').State<typegame>}\n * @constant\n */\nconst stategame = new HYPERCUBEJS.State(game);\n\nexport {\n\n    stategame\n};\n\nexport default stategame;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {stategame} from '@/states/game.js';\n\n// @TODO\nclass ScriptBrick1x1x1 extends HYPERCUBEJS.Script {\n\n    $tocolor = false;\n\n    $colorized = false;\n\n    $model;\n\n    constructor($model) {\n\n        super();\n\n        this.$model = $model;\n        this.$delay = Math.random() * 4000;\n    }\n\n    onstart($entity) {\n\n        if (this.$model === 'mountain') {\n\n            const color = new HYPERCUBEJS.MaterialColor('mountain', {\n\n                'color': [0.8 + (Math.random() * .2), 0.2 + (Math.random() * .2), 0.2 + (Math.random() * .2)]\n            });\n\n            $entity.meshes[0].setmaterial(color);\n        }\n\n        if (this.$model === 'tree') {\n\n            const color = new HYPERCUBEJS.MaterialColor('tree', {\n\n                'color': [0.2 + (Math.random() * .2), 0.5 + (Math.random() * .2), 0.2 + (Math.random() * .2)]\n            });\n\n            $entity.meshes[0].setmaterial(color);\n        }\n\n        if (this.$model === 'temple') {\n\n            const color = new HYPERCUBEJS.MaterialColor('tree', {\n\n                'color': [0.4 + (Math.random() * .2), 0.6 + (Math.random() * .2), 0.8 + (Math.random() * .2)]\n            });\n\n            $entity.meshes[0].setmaterial(color);\n        }\n\n        stategame.watchstate(() => {\n\n            if (this.$colorized === false\n            && stategame.getstate().mountain === true\n            && this.$model === 'mountain') {\n\n                this.$tocolor = true;\n            }\n\n            if (this.$colorized === false\n            && stategame.getstate().tree === true\n            && this.$model === 'tree') {\n\n                this.$tocolor = true;\n            }\n\n            if (this.$colorized === false\n            && stategame.getstate().temple === true\n            && this.$model === 'temple') {\n\n                this.$tocolor = true;\n            }\n        })\n    }\n\n    ontick($timeframe, $entity) {\n\n        if (this.$tocolor === true\n        && this.$colorized === false) {\n\n            this.$delay -= $timeframe;\n\n            if (this.$delay > 0) {\n\n                return;\n            }\n\n            if (stategame.getstate().mountain === true\n            && this.$model === 'mountain') {\n\n                const gray = 0.8 + 0.2 * Math.random();\n\n                const color = new HYPERCUBEJS.MaterialColor('plop', {\n\n                    // 'color': [Math.random(), Math.random(), Math.random()]\n                    // 'color': [Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5]\n                    // 'color': [1.0, 1.0, 1.0]\n                    'color': [gray, gray, gray]\n                });\n\n                $entity.meshes[0].setmaterial(color);\n\n                this.$colorized = true;\n            }\n\n            if (stategame.getstate().tree === true\n            && this.$model === 'tree') {\n\n                const gray = 0.8 + 0.2 * Math.random();\n\n                const color = new HYPERCUBEJS.MaterialColor('plop', {\n\n                    // 'color': [Math.random(), Math.random(), Math.random()]\n                    // 'color': [Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5]\n                    // 'color': [1.0, 1.0, 1.0]\n                    'color': [gray, gray, gray]\n                });\n\n                $entity.meshes[0].setmaterial(color);\n\n                this.$colorized = true;\n            }\n\n            if (stategame.getstate().temple === true\n            && this.$model === 'temple') {\n\n                const gray = 0.8 + 0.2 * Math.random();\n\n                const color = new HYPERCUBEJS.MaterialColor('plop', {\n\n                    // 'color': [Math.random(), Math.random(), Math.random()]\n                    // 'color': [Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5]\n                    // 'color': [1.0, 1.0, 1.0]\n                    'color': [gray, gray, gray]\n                });\n\n                $entity.meshes[0].setmaterial(color);\n\n                this.$colorized = true;\n            }\n        }\n    }\n}\n\nexport {\n\n    ScriptBrick1x1x1\n};\n\nexport default ScriptBrick1x1x1;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {ScriptBrick1x1x1} from './brick1x1x1.script.js';\n\n/**\n * Creates 1x1x1 brick gameobjects.\n * @param {string} $model The material to add.\n * @returns {HYPERCUBEJS.Node}\n */\nfunction gameobjectbrick1x1x1($model) {\n\n    const brick1x1x1 = new HYPERCUBEJS.Node('brick1x1x1');\n    const meshbrick1x1x1 = new HYPERCUBEJS.MeshBox('meshbrick1x1x1', [1, 1, 1]);\n\n    const gray = 0.8 + 0.2 * Math.random();\n\n    const color = new HYPERCUBEJS.MaterialColor('plop', {\n\n        // 'color': [Math.random(), Math.random(), Math.random()]\n        // 'color': [Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5]\n        // 'color': [1.0, 1.0, 1.0]\n        'color': [gray, gray, gray]\n    });\n\n    meshbrick1x1x1.setmaterial(color);\n\n    // meshbrick1x1x1.setmaterial($material);\n    brick1x1x1.addmesh(meshbrick1x1x1);\n    brick1x1x1.setscript(new ScriptBrick1x1x1($model));\n\n    brick1x1x1.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-0.5, -0.5, -0.5],\n        'max': [0.5, 0.5, 0.5]\n    });\n\n    return brick1x1x1;\n}\n\nexport {\n\n    gameobjectbrick1x1x1\n};\n\nexport default gameobjectbrick1x1x1;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * Creates traversable 1x1x1 brick gameobjects.\n * @param {HYPERCUBEJS.Material} [$material] The material to add.\n * @returns {HYPERCUBEJS.Node}\n */\nfunction gameobjectbrick1x1x1traversable($material = HYPERCUBEJS.DEFAULTS.material()) {\n\n    const brick1x1x1traversable = new HYPERCUBEJS.Node('brick1x1x1traversable');\n    const meshbrick1x1x1traversable = new HYPERCUBEJS.MeshBox('meshbrick1x1x1traversable', [1, 1, 1]);\n\n    const gray = 0.8 + 0.2 * Math.random();\n\n    const color = new HYPERCUBEJS.MaterialColor('plop', {\n\n        // 'color': [Math.random(), Math.random(), Math.random()]\n        // 'color': [Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5]\n        // 'color': [1.0, 1.0, 1.0]\n        'color': [gray, gray, gray]\n    });\n\n    meshbrick1x1x1traversable.setmaterial(color);\n\n    // meshbrick1x1x1traversable.setmaterial($material);\n    brick1x1x1traversable.addmesh(meshbrick1x1x1traversable);\n\n    return brick1x1x1traversable;\n}\n\nexport {\n\n    gameobjectbrick1x1x1traversable\n};\n\nexport default gameobjectbrick1x1x1traversable;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * Creates 2x2x2 brick gameobjects.\n * @param {HYPERCUBEJS.Material} [$material] The material to add.\n * @returns {HYPERCUBEJS.Node}\n */\nfunction gameobjectbrick2x2x2($material = HYPERCUBEJS.DEFAULTS.material()) {\n\n    const brick2x2x2 = new HYPERCUBEJS.Node('brick2x2x2');\n    const meshbrick2x2x2 = new HYPERCUBEJS.MeshBox('meshbrick2x2x2', [2, 2, 2]);\n\n    meshbrick2x2x2.setmaterial($material);\n    brick2x2x2.addmesh(meshbrick2x2x2);\n\n    brick2x2x2.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-1, -1, -1],\n        'max': [1, 1, 1]\n    });\n\n    return brick2x2x2;\n}\n\nexport {\n\n    gameobjectbrick2x2x2\n};\n\nexport default gameobjectbrick2x2x2;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * Creates 4x4 plane gameobjects.\n * @param {HYPERCUBEJS.Material} [$material] The material to add.\n * @returns {HYPERCUBEJS.Node}\n */\nfunction gameobjectplane4x4($material = HYPERCUBEJS.DEFAULTS.material()) {\n\n    const plane4x4 = new HYPERCUBEJS.Node('plane4x4');\n    const meshplane4x4 = new HYPERCUBEJS.MeshPlane('meshplane4x4', [4, 4]);\n\n    meshplane4x4.setmaterial($material);\n    plane4x4.addmesh(meshplane4x4);\n\n    plane4x4.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-2, 0, -2],\n        'max': [2, 0, 2]\n    });\n\n    return plane4x4;\n}\n\nexport {\n\n    gameobjectplane4x4\n};\n\nexport default gameobjectplane4x4;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * Creates 16x16 plane gameobjects.\n * @param {HYPERCUBEJS.Material} [$material] The material to add.\n * @returns {HYPERCUBEJS.Node}\n */\nfunction gameobjectplane16x16($material = HYPERCUBEJS.DEFAULTS.material()) {\n\n    const plane16x16 = new HYPERCUBEJS.Node('plane16x16');\n    const meshplane16x16 = new HYPERCUBEJS.MeshPlane('meshplane16x16', [16, 16]);\n\n    meshplane16x16.setmaterial($material);\n    plane16x16.addmesh(meshplane16x16);\n\n    plane16x16.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-8, 0, -8],\n        'max': [8, 0, 8]\n    });\n\n    return plane16x16;\n}\n\nexport {\n\n    gameobjectplane16x16\n};\n\nexport default gameobjectplane16x16;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * Creates 32x32 plane gameobjects.\n * @param {HYPERCUBEJS.Material} [$material] The material to add.\n * @returns {HYPERCUBEJS.Node}\n */\nfunction gameobjectplane32x32($material = HYPERCUBEJS.DEFAULTS.material()) {\n\n    const plane32x32 = new HYPERCUBEJS.Node('plane32x32');\n    const meshplane32x32 = new HYPERCUBEJS.MeshPlane('meshplane32x32', [32, 32]);\n\n    meshplane32x32.setmaterial($material);\n    plane32x32.addmesh(meshplane32x32);\n\n    plane32x32.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-16, 0, -16],\n        'max': [16, 0, 16]\n    });\n\n    return plane32x32;\n}\n\nexport {\n\n    gameobjectplane32x32\n};\n\nexport default gameobjectplane32x32;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * Creates 1080x1080 plane gameobjects.\n * @param {HYPERCUBEJS.Material} [$material] The material to add.\n * @returns {HYPERCUBEJS.Node}\n */\nfunction gameobjectplane1080x1080($material = HYPERCUBEJS.DEFAULTS.material()) {\n\n    const plane1080x1080 = new HYPERCUBEJS.Node('plane1080x1080');\n    const meshplane1080x1080 = new HYPERCUBEJS.MeshPlane('meshplane1080x1080', [1080, 1080]);\n\n    meshplane1080x1080.setmaterial($material);\n    plane1080x1080.addmesh(meshplane1080x1080);\n\n    plane1080x1080.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-1080 / 2, 0, -1080 / 2],\n        'max': [1080 / 2, 0, 1080 / 2]\n    });\n\n    return plane1080x1080;\n}\n\nexport {\n\n    gameobjectplane1080x1080\n};\n\nexport default gameobjectplane1080x1080;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * The player node.\n * @type {HYPERCUBEJS.Node}\n * @constant\n */\nconst nodeplayer = new HYPERCUBEJS.Node();\n\n/**\n * The state manager of the player node.\n * @type {import('@hypercubejs/hypercubejs').State<HYPERCUBEJS.Node>}\n * @constant\n */\nconst statenodeplayer = new HYPERCUBEJS.State(nodeplayer);\n\nexport {\n\n    statenodeplayer\n};\n\nexport default statenodeplayer;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {statenodeplayer} from '@/states/nodeplayer.js';\n\n// @TODO\nclass ScriptSoundAmbiant extends HYPERCUBEJS.Script {\n\n    constructor() {\n\n        super();\n    }\n\n    // oninput($entity, $event) {\n\n    //     console.log($event);\n    // }\n\n    onstart($entity) {\n\n        // @TODO : only if DeviceSpeaker\n\n        $entity.audio.play();\n        $entity.audio.loop = true;\n\n        // setTimeout(() => {\n\n        //     $entity.parent.removechild($entity);\n        // }, 4000);\n    }\n\n    // /**\n    //  * @type {typeof HYPERCUBEJS.Script.prototype.ontick}\n    //  */\n    // ontick($timeframe, $entity) {\n\n    //     // $entity.translateself([0, 0, -5 * $timeframe / 1000]);\n\n    //     $entity.lookat(statenodeplayer.getstate().translation, [0, 1, 0]);\n    // }\n}\n\nexport {\n\n    ScriptSoundAmbiant\n};\n\nexport default ScriptSoundAmbiant;\n","export default __webpack_public_path__ + \"9927c1bc5692aa4c0d5175e0680cf2ae.mp3\";","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {ScriptSoundAmbiant} from './soundambiant.script.js';\n\nimport ambiant from './Aperture-Tag-OST-28-Central-Hub-_152kbit_Opus_.mp3';\n// import ambiant2 from './Fountain Water Bubbling.mp3';\n\nfunction gameobjectsoundambiant() {\n\n    const soundambiant = new HYPERCUBEJS.Node('soundambiant');\n    const meshsoundambiant = new HYPERCUBEJS.MeshBox('meshsoundambiant', [1, 1, 1]);\n    const materialmeshsoundambiant = new HYPERCUBEJS.MaterialColor('materialmeshsoundambiant', {'color': [0.0, 0.0, 0.0]});\n\n    meshsoundambiant.setmaterial(materialmeshsoundambiant);\n    meshsoundambiant.setshadowcasting(false);\n    soundambiant.addmesh(meshsoundambiant);\n    soundambiant.setaudio(new Audio(ambiant));\n    soundambiant.setscript(new ScriptSoundAmbiant());\n\n    // soundambiant.setcomponent('collideraabb', {\n\n    //     'type': 'static',\n\n    //     'min': [-0.5, -0.5, -0.5],\n    //     'max': [0.5, 0.5, 0.5]\n    // });\n\n    return soundambiant;\n}\n\nexport {\n\n    gameobjectsoundambiant\n};\n\nexport default gameobjectsoundambiant;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\n/**\n * @typedef {object} typeplayer\n * @property {boolean} typeplayer.jumping\n * @property {number} typeplayer.jump\n * @property {number} typeplayer.jumpcooldown\n */\n\n/**\n * The player data.\n * @type {typeplayer}\n * @constant\n */\nconst player = {\n\n    'jumping': true,\n    'jump': -1,\n    'jumpcooldown': 0\n};\n\n/**\n * The state manager of the player data.\n * @type {import('@hypercubejs/hypercubejs').State<typeplayer>}\n * @constant\n */\nconst stateplayer = new HYPERCUBEJS.State(player);\n\nexport {\n\n    stateplayer\n};\n\nexport default stateplayer;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport gameobjectsoundambiant from '@/gameobjects/soundambiant/soundambiant.js';\n\nimport {statenodeplayer} from '@/states/nodeplayer.js';\nimport {stateplayer} from '@/states/player.js';\nimport {stategame} from '@/states/game.js';\n\nclass ScriptPlayer extends HYPERCUBEJS.Script {\n\n    $inputs;\n\n    $rotation;\n\n    $rotationcamera;\n\n    /**\n     * @type {vector3}\n     */\n    $translation;\n\n    $timelightning;\n\n    $locked;\n\n    constructor() {\n\n        super();\n\n        this.$initializeinputs();\n\n        this.$rotation = [0, 0, 0];\n        this.$rotationcamera = [0, 0, 0];\n        this.$translation = [0, 0, 0];\n\n        this.$timelightning = 0;\n\n        this.$locked = false;\n    }\n\n    $initializeinputs() {\n\n        this.$inputs = {\n\n            'a': false,\n            'z': false,\n            'e': false,\n            'q': false,\n            's': false,\n            'd': false,\n            'w': false,\n            'ArrowUp': false,\n            'ArrowLeft': false,\n            'ArrowRight': false,\n            'ArrowDown': false,\n            'Enter': false,\n            ' ': false,\n            'm': false,\n            'KeyW': false,\n            'KeyA': false,\n            'KeyS': false,\n            'KeyD': false,\n            'Space': false,\n        };\n    }\n\n    /**\n     *\n     * @param {HYPERCUBEJS.Node} $other TODOOOOO\n     */\n    oncollide($timebeforecollision, $entity, $other) {\n\n        // console.log($other.name, $timecollision);\n\n        // stateplayer.setstate({\n\n        //     ...stateplayer.getstate(),\n        //     'jumping': false\n        // });\n    }\n\n    // @TODO\n    /**\n     *\n     * @param {HYPERCUBEJS.Node} $entity\n     * @param {*} $event\n     */\n    oninput($entity, $event) {\n\n        this.$translation = [0, 0, 0];\n\n        if ($event.type === 'keydown'\n        && this.$inputs.hasOwnProperty($event.code) === true) {\n\n            // @TODO : replace par event.code\n            this.$inputs[$event.code] = true;\n\n            // console.log($event.key);\n        }\n\n        else if ($event.type === 'keyup'\n        && this.$inputs.hasOwnProperty($event.code) === true) {\n\n            // @TODO : replace par event.keyCode\n            this.$inputs[$event.code] = false;\n        }\n\n        else if ($event.type === 'pointermove') {\n\n            this.engine.deviceviewer.element.requestPointerLock();\n\n            this.$locked = true;\n        }\n\n        else if ($event.type === 'blur') {\n\n            this.$initializeinputs();\n        }\n\n        if ($event.type === 'pointermove'\n        && this.$locked === true) {\n\n            this.$rotation[1] += - $event.movementX / 20 / this.engine.deviceviewer.ratio();\n            this.$rotationcamera[0] += - (Math.sign($event.movementY) * Math.max(Math.abs($event.movementY), 5)) / 20 / this.engine.deviceviewer.ratio();\n        }\n\n        if (this.$inputs['KeyW'] === true) {\n            this.$translation[2] += -1;\n            // $entity.audio.play();\n        }\n        if ((this.$inputs['Space'] === true || this.$inputs['ArrowUp'] === true || ($event.type === 'pointerdown' && $event.buttons === 1))\n        && stateplayer.getstate().jumping === false\n        && stateplayer.getstate().jumpcooldown <= 0) {\n\n            stateplayer.setstate({\n\n                'jumping': true,\n                'jump': 2,\n                'jumpcooldown': 700\n            });\n        }\n        if (this.$inputs['KeyA'] === true) {\n            this.$translation[0] += -1;\n            // $entity.audio.play();\n        }\n        if (this.$inputs['KeyS'] === true) {\n            this.$translation[2] += 1;\n            // $entity.audio.play();\n        }\n        if (this.$inputs['KeyD'] === true) {\n            this.$translation[0] += 1;\n            // $entity.audio.play();\n        }\n        // if (this.$inputs['Enter'] === true) {\n        //     stategame.setstate({\n\n        //         ...stategame.getstate(),\n        //         'mountain': true,\n        //         'temple': true,\n        //         'tree': true,\n        //         // 'sky': true\n        //     });\n        // }\n        // if (this.$inputs['ArrowLeft'] === true) {\n        //     this.$rotation[1] += 1;\n        // }\n        // if (this.$inputs['ArrowRight'] === true) {\n        //     this.$rotation[1] += -1;\n        // }\n        // if (this.$inputs['m'] === true) {\n        //     const ambiant = gameobjectsoundambiant();\n        //     ambiant.audio.play();\n        //     ambiant.audio.loop = true;\n        //     ambiant.rotate([...$entity.rotation]);\n        //     ambiant.translate([...$entity.translation]);\n        //     ambiant.translate([0, 1, 0]);\n        //     this.scene.noderoot.addchild(ambiant);\n        // }\n        // if (this.$inputs['z'] === false\n        // && this.$inputs['q'] === false\n        // && this.$inputs['s'] === false\n        // && this.$inputs['d'] === false) {\n        //     // $entity.audio.pause();\n        // }\n    }\n\n    // onpointerdown($entity) {\n\n    //     $entity.parent.removechild($entity);\n    // }\n\n    // @TODO\n    /**\n     *\n     * @param {HYPERCUBEJS.Node} $entity TODOOOOOOOOOOOOO\n     */\n    onstart($entity) {\n\n        // statenodeplayer.setstate($entity);\n\n        // @TODO : only if DeviceSpeaker\n\n        // $entity.audio.loop = true;\n    }\n\n    /**\n     *\n     * @param {*} $timeframe\n     * @param {HYPERCUBEJS.Node} $entity\n     */\n    ontick($timeframe, $entity) {\n\n        const pertick = $timeframe / 1000;\n\n        // const [lightx, lighty, lightz] = this.scene.lightdirectional.direction;\n\n        // this.scene.setlightdirectional(new HYPERCUBEJS.LightDirectional('Light Directional', [Math.sin(performance.now() / 1000), lighty, Math.cos(performance.now() / 1000)], [1.0, 1.0, 0.8]));\n\n        // if (stategame.getstate().light === true) {\n\n        //     const speed = 1;\n\n        //     const fogorigin = [this.scene.fog.distancefogbegin, this.scene.fog.distancefogmaximum, this.scene.fog.density];\n        //     const foggoal = [-16, 64, 0.8];\n\n        //     const difference = HYPERCUBEJS.VECTOR3.subtract(foggoal, fogorigin);\n        //     const forward = HYPERCUBEJS.VECTOR3.multiplyscalar(difference, pertick * speed);\n        //     const fog = HYPERCUBEJS.VECTOR3.add(fogorigin, forward);\n\n        //     this.scene.setfog(new HYPERCUBEJS.Fog(this.scene.fog.color, fog[0], fog[1], fog[2]));\n        // }\n\n        if (stategame.getstate().sky === true) {\n\n            const speed = 3;\n\n            const difference = HYPERCUBEJS.VECTOR3.subtract([0.8, 0.9, 1.0], this.scene.skybox.color);\n            const forward = HYPERCUBEJS.VECTOR3.multiplyscalar(difference, pertick * speed);\n            const color = HYPERCUBEJS.VECTOR3.add(this.scene.skybox.color, forward);\n\n            this.scene.setskybox(new HYPERCUBEJS.Skybox('Skybox', color));\n            this.scene.setfog(new HYPERCUBEJS.Fog(color, 8, 64, 0.8));\n        }\n\n        stateplayer.setstate({\n\n            ...stateplayer.getstate(),\n            'jumpcooldown': stateplayer.getstate().jumpcooldown - $timeframe\n        });\n\n        if (stateplayer.getstate().jumpcooldown <= 0) {\n\n            stateplayer.setstate({\n\n                ...stateplayer.getstate(),\n                'jumping': false\n            });\n        }\n\n        if (stateplayer.getstate().jumping === true\n        && stateplayer.getstate().jump > -2) {\n\n            const jump = stateplayer.getstate().jump - 6 * pertick;\n\n            stateplayer.setstate({\n\n                ...stateplayer.getstate(),\n                'jump': jump\n            });\n        }\n\n        const y = stateplayer.getstate().jump;\n\n        const [x,, z] = HYPERCUBEJS.VECTOR3.rotate(this.$translation, $entity.rotation);\n        // const [a, b, c] = HYPERCUBEJS.VECTOR3.normalize([x, y, z]);\n        const [a, b, c] = HYPERCUBEJS.VECTOR3.normalize([x, 0, z]);\n        $entity.translate([\n            parseFloat((a * 6 * pertick).toFixed(16)),\n            parseFloat((y * 6 * pertick).toFixed(16)),\n            parseFloat((c * 6 * pertick).toFixed(16))\n        ]);\n        $entity.rotate(HYPERCUBEJS.QUATERNION.fromeuler([\n            this.$rotation[0] * HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick,\n            this.$rotation[1] * HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick,\n            this.$rotation[2] * HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick\n        ]));\n\n        $entity.nodes[0].translateself([0, -0.5, -2]);\n\n        const currentrotation = HYPERCUBEJS.QUATERNION.toeuler($entity.nodes[0].rotation);\n        let deltarotation = 0;\n\n        const currentrotationx = currentrotation[0] / HYPERCUBEJS.CONSTANTS.RADIANS;\n\n        // console.log(currentrotationx)\n\n        if (\n            (currentrotationx + (this.$rotationcamera[0] * 180 * pertick) > -70 && currentrotationx + (this.$rotationcamera[0] * 180 * pertick) < 10)\n            || (currentrotationx + (this.$rotationcamera[0] * 180 * pertick) < -170 || currentrotationx + (this.$rotationcamera[0] * 180 * pertick) > 110)\n        )\n        {\n\n            $entity.nodes[0].rotateself(\n                HYPERCUBEJS.QUATERNION.fromeuler([\n                    this.$rotationcamera[0] * HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick,\n                    0,\n                    0\n                ])\n            );\n\n            // console.log(this.$rotationcamera[0] * HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick)\n        }\n\n        // const currentrotationafter = HYPERCUBEJS.QUATERNION.toeuler($entity.nodes[0].rotation);\n        // let deltarotationafter = 0;\n\n        // const currentrotationxafter = currentrotationafter[0] / HYPERCUBEJS.CONSTANTS.RADIANS;\n\n        // console.log(currentrotationxafter)\n\n        // if (currentrotationxafter < -70) {\n        //     debugger\n        // }\n        // else {\n\n        //     console.log($entity.nodes[0].rotation);\n        // }\n\n        // console.log(HYPERCUBEJS.QUATERNION.toeuler($entity.nodes[0].rotation)[0] / HYPERCUBEJS.CONSTANTS.RADIANS)\n\n        $entity.nodes[0].translateself([0, 0.5, 2]);\n\n        // if ($entity.translation[1] < -32) {\n\n        //     $entity.translate([0, 64, 0]);\n        // }\n\n        // this.$timelightning += $timeframe;\n\n        // if (this.$timelightning > 2300) {\n\n        //     this.$timelightning = 0;\n\n        //     const randomlight = 1;\n        //     this.engine.scene.setlightdirectional(new HYPERCUBEJS.LightDirectional('Light Directional', [-0.4, -0.8, -0.2], [randomlight, randomlight, randomlight]));\n        //     this.engine.scene.setlightambiant(new HYPERCUBEJS.LightAmbiant('Light Ambiant', [0.2 * randomlight, 0.2 * randomlight, 0.2 * randomlight]));\n        //     this.engine.scene.setfog(new HYPERCUBEJS.Fog([0.6 * randomlight, 0.7 * randomlight, 0.8 * randomlight], 0, 32, 1.0));\n        //     this.engine.scene.setskybox(new HYPERCUBEJS.Skybox('Skybox', [0.6 * randomlight, 0.7 * randomlight, 0.8 * randomlight]));\n        // }\n\n        // if (this.$timelightning > 2000) {\n\n        //     const randomlight = 0.4 + Math.random();\n        //     this.engine.scene.setlightdirectional(new HYPERCUBEJS.LightDirectional('Light Directional', [-0.8, -0.2, -0.4], [randomlight, randomlight, randomlight]));\n        //     this.engine.scene.setlightambiant(new HYPERCUBEJS.LightAmbiant('Light Ambiant', [0.8 * randomlight, 0.8 * randomlight, 0.8 * randomlight]));\n        //     this.engine.scene.setfog(new HYPERCUBEJS.Fog([0.6 * randomlight, 0.7 * randomlight, 0.8 * randomlight], 0, 32, 1.0));\n        //     this.engine.scene.setskybox(new HYPERCUBEJS.Skybox('Skybox', [0.6 * randomlight, 0.7 * randomlight, 0.8 * randomlight]));\n        // }\n\n\n\n        // $entity.lookat([0, 2, 0], [0, 1, 0]);\n\n        this.$rotation = [0, 0, 0];\n        this.$rotationcamera = [0, 0, 0];\n    }\n}\n\nexport {\n\n    ScriptPlayer\n};\n\nexport default ScriptPlayer;\n","export default __webpack_public_path__ + \"1886eef41f1cdfe75bde8b131d46c894.mp3\";","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {stategame} from '@/states/game.js';\n\n// @TODO\nclass ScriptCoreMountain extends HYPERCUBEJS.Script {\n\n    constructor() {\n\n        super();\n    }\n\n    /**\n     *\n     * @param {*} $timebeforecollision\n     * @param {HYPERCUBEJS.Node} $entity\n     */\n    oncollide($timebeforecollision, $entity) {\n\n        stategame.setstate({\n\n            ...stategame.getstate(),\n            'mountain': true\n        });\n\n        $entity.parent.removechild($entity);\n    }\n\n    ondestroy($entity) {\n\n        $entity.audio.pause();\n    }\n\n    onstart($entity) {\n\n        $entity.audio.play();\n        $entity.audio.loop = true;\n    }\n\n    ontick($timeframe, $entity) {\n\n        const pertick = $timeframe / 1000;\n\n        $entity.rotate(HYPERCUBEJS.QUATERNION.fromeuler([\n            0,\n            HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick,\n            0\n        ]));\n    }\n}\n\nexport {\n\n    ScriptCoreMountain\n};\n\nexport default ScriptCoreMountain;\n","export default __webpack_public_path__ + \"494f5eb3b662195d30734d6d5e2b6943.mp3\";","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {ScriptCoreMountain} from './coremountain.script.js';\n\nimport ambiant from './mountain.mp3';\n\n// import ambiant from './Aperture-Tag-OST-28-Central-Hub-_152kbit_Opus_.mp3';\n// import ambiant2 from './Fountain Water Bubbling.mp3';\n\nfunction gameobjectcoremountain() {\n\n    const coremountain = new HYPERCUBEJS.Node('coremountain');\n    const meshcoremountain = new HYPERCUBEJS.MeshIcosahedron('meshcoremountain');\n    const materialmeshcoremountain = new HYPERCUBEJS.MaterialColor('materialmeshcoremountain', {'color': [0.8, 0.2, 0.2]});\n\n    meshcoremountain.setmaterial(materialmeshcoremountain);\n    coremountain.addmesh(meshcoremountain);\n    coremountain.setaudio(new Audio(ambiant));\n    coremountain.setscript(new ScriptCoreMountain());\n\n    coremountain.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-1, -1, -1],\n        'max': [1, 1, 1]\n    });\n\n    return coremountain;\n}\n\nexport {\n\n    gameobjectcoremountain\n};\n\nexport default gameobjectcoremountain;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {stategame} from '@/states/game.js';\n\n// @TODO\nclass ScriptCoreTemple extends HYPERCUBEJS.Script {\n\n    constructor() {\n\n        super();\n    }\n\n    /**\n     *\n     * @param {*} $timebeforecollision\n     * @param {HYPERCUBEJS.Node} $entity\n     */\n    oncollide($timebeforecollision, $entity) {\n\n        stategame.setstate({\n\n            ...stategame.getstate(),\n            'temple': true\n        });\n\n        $entity.parent.removechild($entity);\n    }\n\n    ondestroy($entity) {\n\n        $entity.audio.pause();\n    }\n\n    onstart($entity) {\n\n        $entity.audio.play();\n        $entity.audio.loop = true;\n    }\n\n    ontick($timeframe, $entity) {\n\n        const pertick = $timeframe / 1000;\n\n        $entity.rotate(HYPERCUBEJS.QUATERNION.fromeuler([\n            0,\n            HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick,\n            0\n        ]));\n    }\n}\n\nexport {\n\n    ScriptCoreTemple\n};\n\nexport default ScriptCoreTemple;\n","export default __webpack_public_path__ + \"4c53f632d20d8872be12851b5add0b2a.mp3\";","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {ScriptCoreTemple} from './coretemple.script.js';\n\nimport ambiant from './temple.mp3';\n\n// import ambiant from './Aperture-Tag-OST-28-Central-Hub-_152kbit_Opus_.mp3';\n// import ambiant2 from './Fountain Water Bubbling.mp3';\n\nfunction gameobjectcoretemple() {\n\n    const coretemple = new HYPERCUBEJS.Node('coretemple');\n    const meshcoretemple = new HYPERCUBEJS.MeshIcosahedron('meshcoretemple');\n    const materialmeshcoretemple = new HYPERCUBEJS.MaterialColor('materialmeshcoretemple', {'color': [0.4, 0.6, 0.8]});\n\n    meshcoretemple.setmaterial(materialmeshcoretemple);\n    coretemple.addmesh(meshcoretemple);\n    coretemple.setaudio(new Audio(ambiant));\n    coretemple.setscript(new ScriptCoreTemple());\n\n    coretemple.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-1, -1, -1],\n        'max': [1, 1, 1]\n    });\n\n    return coretemple;\n}\n\nexport {\n\n    gameobjectcoretemple\n};\n\nexport default gameobjectcoretemple;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {stategame} from '@/states/game.js';\n\n// @TODO\nclass ScriptCoreTree extends HYPERCUBEJS.Script {\n\n    constructor() {\n\n        super();\n    }\n\n    /**\n     *\n     * @param {*} $timebeforecollision\n     * @param {HYPERCUBEJS.Node} $entity\n     */\n    oncollide($timebeforecollision, $entity) {\n\n        stategame.setstate({\n\n            ...stategame.getstate(),\n            'tree': true\n        });\n\n        $entity.parent.removechild($entity);\n    }\n\n    ondestroy($entity) {\n\n        $entity.audio.pause();\n    }\n\n    onstart($entity) {\n\n        $entity.audio.play();\n        $entity.audio.loop = true;\n    }\n\n    /**\n     *\n     * @param {*} $timeframe\n     * @param {HYPERCUBEJS.Node} $entity\n     */\n    ontick($timeframe, $entity) {\n\n        const pertick = $timeframe / 1000;\n\n        $entity.rotate(HYPERCUBEJS.QUATERNION.fromeuler([\n            0,\n            HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick,\n            0\n        ]));\n    }\n}\n\nexport {\n\n    ScriptCoreTree\n};\n\nexport default ScriptCoreTree;\n","export default __webpack_public_path__ + \"40feb757990aa23ef49f5b74afef0060.mp3\";","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {ScriptCoreTree} from './coretree.script.js';\n\n// import ambiant from './Aperture-Tag-OST-28-Central-Hub-_152kbit_Opus_.mp3';\nimport ambiant from './tree.mp3';\n\n// import ambiant from './Aperture-Tag-OST-28-Central-Hub-_152kbit_Opus_.mp3';\n// import ambiant2 from './Fountain Water Bubbling.mp3';\n\nfunction gameobjectcoretree() {\n\n    const coretree = new HYPERCUBEJS.Node('coretree');\n    const meshcoretree = new HYPERCUBEJS.MeshIcosahedron('meshcoretree');\n    const materialmeshcoretree = new HYPERCUBEJS.MaterialColor('materialmeshcoretree', {'color': [0.2, 0.5, 0.2]});\n\n    meshcoretree.setmaterial(materialmeshcoretree);\n    coretree.addmesh(meshcoretree);\n    coretree.setaudio(new Audio(ambiant));\n    coretree.setscript(new ScriptCoreTree());\n\n    coretree.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-1, -1, -1],\n        'max': [1, 1, 1]\n    });\n\n    return coretree;\n}\n\nexport {\n\n    gameobjectcoretree\n};\n\nexport default gameobjectcoretree;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {stategame} from '@/states/game.js';\nimport {statenodeplayer} from '@/states/nodeplayer.js';\n\n// @TODO\nclass ScriptCoreEnd extends HYPERCUBEJS.Script {\n\n    constructor() {\n\n        super();\n    }\n\n    /**\n     *\n     * @param {*} $timebeforecollision\n     * @param {HYPERCUBEJS.Node} $entity\n     */\n    oncollide($timebeforecollision, $entity) {\n\n        console.log('end game')\n\n        $entity.parent.removechild($entity);\n\n        this.engine.destroy();\n\n        document.getElementById('end').style.display = 'flex';\n        document.body.removeChild(this.engine.deviceviewer.element);\n\n        let resources = 0;\n\n        if (stategame.getstate().tree === true) {\n\n            resources += 1;\n        }\n\n        if (stategame.getstate().temple === true) {\n\n            resources += 1;\n        }\n\n        if (stategame.getstate().mountain === true) {\n\n            resources += 1;\n        }\n\n        const contentresources = document.getElementById('resources');\n        contentresources.innerText = '' + resources;\n\n        if (resources === 3) {\n\n            document.getElementById('congratulations').style.display = 'block';\n        }\n        else {\n\n            document.getElementById('nope').style.display = 'block';\n        }\n    }\n\n    ondestroy($entity) {\n\n        $entity.audio.pause();\n    }\n\n    onstart($entity) {\n\n        $entity.audio.play();\n        $entity.audio.loop = true;\n    }\n\n    ontick($timeframe, $entity) {\n\n        // $entity.lookat(statenodeplayer.getstate().translation, HYPERCUBEJS.VECTOR3.create([0, 1, 0]));\n\n        // const pertick = $timeframe / 1000;\n\n        // $entity.rotate(HYPERCUBEJS.QUATERNION.fromeuler([\n        //     0,\n        //     HYPERCUBEJS.CONSTANTS.RADIANS * 180 * pertick,\n        //     0\n        // ]));\n    }\n}\n\nexport {\n\n    ScriptCoreEnd\n};\n\nexport default ScriptCoreEnd;\n","export default __webpack_public_path__ + \"589311c9fdfe7e6ee40c3ceb3d99c4bc.mp3\";","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {ScriptCoreEnd} from './coreend.script.js';\n\nimport ambiant from '../ambiant.mp3';\n\n// import ambiant from './Aperture-Tag-OST-28-Central-Hub-_152kbit_Opus_.mp3';\n// import ambiant2 from './Fountain Water Bubbling.mp3';\n\nfunction gameobjectcoreend() {\n\n    const coreend = new HYPERCUBEJS.Node('coreend');\n    const meshcoreend = new HYPERCUBEJS.MeshBox('meshcoreend', [2, 2, 2]);\n    const materialmeshcoreend = new HYPERCUBEJS.MaterialColor('materialmeshcoreend', {'color': [0, 0, 0]});\n\n    meshcoreend.setmaterial(materialmeshcoreend);\n    coreend.addmesh(meshcoreend);\n    coreend.setaudio(new Audio(ambiant));\n    coreend.setscript(new ScriptCoreEnd());\n\n    coreend.setcomponent('collideraabb', {\n\n        'type': 'static',\n\n        'min': [-1, -1, -1],\n        'max': [1, 1, 1]\n    });\n\n    return coreend;\n}\n\nexport {\n\n    gameobjectcoreend\n};\n\nexport default gameobjectcoreend;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport * as GAMEOBJECTS from '@/gameobjects/index.js';\n\nimport {statenodeplayer} from '@/states/nodeplayer.js';\n\nimport cartridge from 'public/cartridge.json';\n\n/**\n * Creates Games.\n * @example\n * const game = new Game();\n */\nclass Game {\n\n    /**\n     * Stores the Hypercube.js Game Engine currently being used.\n     * @type {import('@hypercubejs/hypercubejs').Engine}\n     * @private\n     */\n    $engine;\n\n    /**\n     * Stores the ResizeObserver object.\n     * @type {ResizeObserver}\n     * @private\n     */\n    $resizeobserver;\n\n    /**\n     * Creates a new Game.\n     */\n    constructor() {\n\n        this.$engine = new HYPERCUBEJS.Engine();\n\n        this.$engine.setdeviceviewer(new HYPERCUBEJS.DeviceViewer());\n        this.$engine.deviceviewer.appendto(document.body);\n        this.$engine.deviceviewer.focus();\n\n        this.$resizeobserver = new ResizeObserver(() => {\n\n            this.$engine.resize();\n        });\n\n        this.$resizeobserver.observe(document.body);\n\n        window.addEventListener('beforeunload', () => {\n\n            this.destroy();\n        });\n    }\n\n    /**\n     * Destroys the Game.\n     * @public\n     */\n    destroy() {\n\n        this.$resizeobserver.disconnect();\n\n        this.$engine.destroy();\n    }\n\n    /**\n     * Starts the Game.\n     * @public\n     */\n    start() {\n\n        const noderoot = new HYPERCUBEJS.Node('node root');\n\n        const mapping = {\n\n            'brick1x1x1': GAMEOBJECTS.gameobjectbrick1x1x1,\n            'brick1x1x1traversable': GAMEOBJECTS.gameobjectbrick1x1x1traversable,\n            // 'brick1x1x1traversable': GAMEOBJECTS.gameobjectbrick1x1x1,\n            'brick2x2x2': GAMEOBJECTS.gameobjectbrick2x2x2,\n            'plane4x4': GAMEOBJECTS.gameobjectplane4x4,\n            'plane16x16': GAMEOBJECTS.gameobjectplane16x16,\n            'plane32x32': GAMEOBJECTS.gameobjectplane32x32,\n            'plane1080x1080': GAMEOBJECTS.gameobjectplane1080x1080,\n\n            'soundambiant': GAMEOBJECTS.gameobjectsoundambiant,\n            'coremountain': GAMEOBJECTS.gameobjectcoremountain,\n            'coretemple': GAMEOBJECTS.gameobjectcoretemple,\n            'coretree': GAMEOBJECTS.gameobjectcoretree,\n            'coreend': GAMEOBJECTS.gameobjectcoreend,\n        };\n\n        cartridge.gameobjects.forEach(($gameobject) => {\n\n            const {model, translation, type, uuid} = $gameobject;\n\n            const factorygameobject = mapping[type];\n\n            if (typeof factorygameobject === 'undefined') {\n\n                return;\n            }\n\n            const gameobject = factorygameobject(model);\n            // const gameobject = factorygameobject(new HYPERCUBEJS.MaterialColor('material random', {'color': [Math.random() * 0.8 + 0.2, Math.random() * 0.8 + 0.2, Math.random() * 0.8 + 0.2]}));\n\n            gameobject.setuuid(uuid);\n            gameobject.translate([...translation]);\n\n            noderoot.addchild(gameobject);\n        });\n\n        // -------------------\n\n        const nodecamera = GAMEOBJECTS.gameobjectcamera();\n        const nodeplayer = GAMEOBJECTS.gameobjectplayer();\n\n        nodeplayer.addchild(nodecamera);\n        noderoot.addchild(nodeplayer);\n\n        // nodeplayer.translate([0, 0.25, 4]);\n        nodeplayer.translate([0, 0.25, 24]);\n        // nodeplayer.translate([0, 0.25, -16]);\n        // nodeplayer.rotate(HYPERCUBEJS.QUATERNION.fromeuler([0, 90 * HYPERCUBEJS.CONSTANTS.RADIANS, 0]));\n\n\n\n        const scene = new HYPERCUBEJS.Scene('demo');\n\n\n\n        console.log(scene);\n\n\n\n        scene.setnoderoot(noderoot);\n        scene.setnodecamera(nodecamera);\n\n\n\n        scene.setantialiasing(false);\n\n\n\n        // const colorambiant = HYPERCUBEJS.DEFAULTS.colorambiant();\n        const colorambiant = HYPERCUBEJS.VECTOR3.create([0.6, 0.6, 0.7]);\n        // const colorambiant = HYPERCUBEJS.VECTOR3.create([0.4, 0.4, 0.5]);\n        // const colorskybox = HYPERCUBEJS.VECTOR3.create([0, 0, 0]);\n        // const colorskybox = HYPERCUBEJS.VECTOR3.create([0.4, 0.6, 0.8]);\n        const colorskybox = HYPERCUBEJS.VECTOR3.create([1, 1, 1]);\n\n        scene.setlightambiant(new HYPERCUBEJS.LightAmbiant('Light Ambiant', colorambiant));\n        scene.setlightdirectional(new HYPERCUBEJS.LightDirectional('Light Directional', [-0.4, -0.8, -0.2], [1.0, 1.0, 0.8]));\n        // scene.setlightdirectional(new HYPERCUBEJS.LightDirectional('Light Directional', [-0.4, -0.8, -0.2], [1.0, 1.0, 0.8]));\n        scene.setskybox(new HYPERCUBEJS.Skybox('Skybox', colorskybox));\n\n        // scene.setfog(new HYPERCUBEJS.Fog(colorskybox, 0, 16, 1.0));\n        // scene.setfog(new HYPERCUBEJS.Fog(colorskybox, 8, 64, 0.8));\n\n        // -------------------\n\n        // statenodeplayer.setstate(nodeplayer);\n\n        // -------------------\n\n        const systems = [\n\n            new HYPERCUBEJS.SystemInput(), // PUIS new HYPERCUBEJS.SystemFSM()\n            new HYPERCUBEJS.SystemScript(),\n            new HYPERCUBEJS.SystemCollisionAABB(),\n            new HYPERCUBEJS.SystemRender(32, 4096, -0.0007),\n            new HYPERCUBEJS.SystemSpatialization()\n        ];\n\n\n\n\n\n\n\n        // @TODO : const helpers = [new HYPERCUBEJS.HELPERS.HelperRaycast()];\n        // @TODO : this.$engine.use(scene, systems, helpers);\n\n        // @TODO : avoir un system[] par défaut dans Engine\n        this.$engine.use(scene, systems);\n        // this.$engine.use(new HYPERCUBEJS.Scene('empty'), systems);\n        this.$engine.start();\n        this.$engine.run(60);\n    }\n}\n\nexport {\n\n    Game\n};\n\nexport default Game;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nfunction gameobjectcamera() {\n\n    const camera = new HYPERCUBEJS.Node('camera');\n\n    camera.setcamera(new HYPERCUBEJS.CameraPerspective('frontfar', {\n\n        'angle': 80,\n        'near': 0.1,\n        'far': 256\n    }));\n    // camera.setcamera(new HYPERCUBEJS.CameraOrthographic('frontfar', {\n\n    //     'left': -32,\n    //     'right': 32,\n    //     'bottom': -32,\n    //     'top': 32,\n    //     'near': -1000,\n    //     'far': 1000\n    // }));\n    camera.translateself([0, 0.5, 2]);\n    camera.rotate(HYPERCUBEJS.QUATERNION.fromeuler([\n\n        0 * HYPERCUBEJS.CONSTANTS.RADIANS,\n        0 * HYPERCUBEJS.CONSTANTS.RADIANS,\n        0 * HYPERCUBEJS.CONSTANTS.RADIANS\n    ]));\n\n    return camera;\n}\n\nexport {\n\n    gameobjectcamera\n};\n\nexport default gameobjectcamera;\n","import * as HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport {ScriptPlayer} from './player.script.js';\n\nimport pick from '../pick.mp3';\n\nfunction gameobjectplayer() {\n\n    const player = new HYPERCUBEJS.Node('player');\n    const meshplayer = new HYPERCUBEJS.MeshBox('meshplayer', [0.5, 0.5, 0.5]);\n    const materialmeshplayer = new HYPERCUBEJS.MaterialColor('materialmeshplayer', {'color': [0, 0, 0]});\n\n    meshplayer.setmaterial(materialmeshplayer);\n    // meshplayer.setshadowcasting(false);\n    player.addmesh(meshplayer);\n    player.setscript(new ScriptPlayer());\n    player.setaudio(new Audio(pick));\n\n    player.setcomponent('collideraabb', {\n\n        'type': 'dynamic',\n\n        'min': [-0.2, -0.25, -0.2],\n        'max': [0.2, 0.25, 0.2]\n    });\n\n    return player;\n}\n\nexport {\n\n    gameobjectplayer\n};\n\nexport default gameobjectplayer;\n","import {Game} from '@/core/game.js';\n\nimport {stategame} from '@/states/game.js';\n\nlet resources = 0;\n\nif (stategame.getstate().tree === true) {\n\n    resources += 1;\n}\n\nif (stategame.getstate().temple === true) {\n\n    resources += 1;\n}\n\nif (stategame.getstate().mountain === true) {\n\n    resources += 1;\n}\n\nconst container = document.getElementById('container');\nconst start = document.getElementById('start');\n\nstart.addEventListener('pointerdown', () => {\n\n    container.style.display = 'none';\n\n    const game = new Game();\n\n    game.start();\n});\n","// startup\n// Load entry module and return exports\n// This entry module doesn't tell about it's top-level declarations so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[757](0, __webpack_exports__, __webpack_require__);\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","AABB","$translation","$xmax","$xmin","$ymax","$ymin","$zmax","$zmin","translation","xmax","xmin","ymax","ymin","zmax","zmin","constructor","$vectormin","$vectormax","xtranslation","ytranslation","ztranslation","aabbminimumcontainer","$a","$b","Math","min","max","aabbsweptcollision","$abefore","$aafter","$bbefore","$bafter","velocitya","velocityb","velocityrelativex","velocityrelativey","velocityrelativez","collidera","colliderb","entrytimex","Number","NEGATIVE_INFINITY","entrytimey","entrytimez","exittimex","POSITIVE_INFINITY","exittimey","exittimez","velocityrelativexinverse","velocityrelativeyinverse","velocityrelativezinverse","entrytime","Camera","$aspect","$name","$type","name","projection","console","warn","type","setaspect","pow","GOLDEN_RATIO","sqrt","PRECISION_EPSILON_8","RADIANS","PI","material","materialcolor","MaterialColor","Engine","$deviceviewer","$loop","$scene","$systems","deviceviewer","scene","destroy","forEach","$system","resize","setsize","run","$framerate","Loop","tick","bind","setdeviceviewer","start","$timeframe","use","systems","setengine","Fog","$color","$density","$distancefogbegin","$distancefogmaximum","color","density","distancefogbegin","distancefogmaximum","$handler","$identifier","$lasttime","$latencytime","$scope","cancelAnimationFrame","currenttime","performance","now","timeframe","requestAnimationFrame","Material","$parameters","parameters","structuredClone","clone","$matrix","fromquaternion","$quaternion","x","y","z","w","matrix","xx","yy","zz","xxxx","yxyx","yyyy","zxzx","zyzy","zzzz","wxwx","wywy","wzwz","getrotation","quaternion","scale","vector","aa","ab","ac","ba","bb","bc","ca","cb","cc","hypot","getscale","scaleinverse","trace","root","rootinverse","gettranslation","invert","ad","bd","cd","da","db","dc","dd","eeff","eefg","eefh","effg","effh","egfh","gehf","gehg","gehh","gfhg","gfhh","gghh","determinant","determinantinverse","lookat","$target","$up","sourcex","sourcey","sourcez","upx","upy","upz","dx","dy","dz","ax","ay","az","multiply","$matrixa","$matrixb","ee","ef","eg","eh","fe","ff","fg","fh","ge","gf","gg","gh","he","hf","hg","hh","translate","$vector3","$indices","$material","$normals","$positions","$shadowcasting","indices","normals","positions","shadowcasting","setmaterial","setshadowcasting","Node","$audio","$camera","$components","$meshes","$nodes","$parent","$script","$uuid","audio","camera","matrixinverse","meshes","nodes","parent","rotation","script","uuid","$updatechildren","$matrixtransformation","$node","addchild","push","setparent","addmesh","$mesh","getcomponent","hascomponent","hasOwnProperty","$vector3target","$vector3up","transformation","removechild","splice","indexOf","unsetparent","removechildren","shift","removecomponent","rotate","rotateself","setaudio","setcamera","setcomponent","$component","setscript","setuuid","translateself","translateto","fromeuler","$angles","cosinex","cos","sinex","sin","cosiney","siney","cosinez","sinez","normalize","Scene","$antialiasing","$fog","$lightambiant","$lightdirectional","$nodecamera","$noderoot","$skybox","antialiasing","fog","lightambiant","lightdirectional","nodecamera","noderoot","skybox","LightAmbiant","LightDirectional","node","mesh","MeshBox","meshcube","CameraPerspective","Skybox","getnodes","$nodechild","getnodesinradius","radius","getnodeswithaudio","HTMLAudioElement","getnodeswithcomponent","getnodeswithmesh","getnodeswithscript","Script","setantialiasing","setfog","setlightambiant","setlightdirectional","setnodecamera","setnoderoot","setskybox","$engine","$running","engine","running","oncollide","$timebeforecollision","$entity","$other","ondestroy","oninput","$event","onstart","ontick","Shader","static","State","$data","$watchers","getstate","setstate","unwatchstate","watchstate","System","add","$vector3a","$vector3b","xa","ya","za","xb","yb","zb","$vector","$values","multiplyscalar","$factor","subtract","CameraOrthographic","$bottom","$far","$left","$near","$right","$top","$options","super","bottom","far","left","near","right","top","$angle","tangent","tan","rangeinverse","angle","DeviceViewer","$container","$element","aspect","element","createElement","style","width","height","outline","appendto","appendChild","focus","setAttribute","ratio","devicePixelRatio","floor","offsetWidth","offsetHeight","clientWidth","clientHeight","$direction","direction","$lengths","JSON","stringify","$memory","$createpositions","xlength","ylength","zlength","xlengthhalved","ylengthhalved","zlengthhalved","MeshIcosahedron","$phi","$phiinverse","MeshPlane","ShaderDepth","ShaderScene","SystemCollisionAABB","log","$distance","abs","$forward","$timeelapsed","pairs","currentindex","current","currentcomponentcollideraabb","currentcomponentbefore","otherindex","other","othercomponentcollideraabb","othercomponentbefore","currentaabbbefore","currentaabbafter","currentaabbswept","otheraabbbefore","otheraabbafter","timecollision","pair","$current","sort","filter","timebeforecollision","timeaftercollision","componentbefore","translationbeforecollision","$pair","currentvelocityreverse","othervelocityreverse","currentvelocity","othervelocity","currentaabb","otheraabb","overlapx","overlapy","overlapz","SystemInput","$events","$stack","preventDefault","removeEventListener","addEventListener","event","SystemRender","$attributelocations","$biasdepth","$buffers","$canvas","$context","$currentmeshtype","$framebufferdepth","$programdepth","$programscene","$sizetexturedepth","$sizehalvedcubedepthmap","$texturedepth","$uniformlocations","$createattributelocations","$program","$shader","Object","keys","attributes","getAttribLocation","$createbuffers","buffernormal","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","bufferposition","bufferindex","ELEMENT_ARRAY_BUFFER","Uint32Array","$createprogramdepth","shadervertex","createShader","VERTEX_SHADER","shaderSource","sourcevertex","compileShader","shaderfragment","FRAGMENT_SHADER","sourcefragment","createProgram","attachShader","linkProgram","$createprogramscene","$createuniformlocations","uniforms","getUniformLocation","$preparedepthmap","$width","$height","createFramebuffer","bindFramebuffer","FRAMEBUFFER","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","DEPTH_COMPONENT32F","DEPTH_COMPONENT","FLOAT","framebufferTexture2D","DEPTH_ATTACHMENT","$resetcanvas","colorred","colorgreen","colorblue","clearColor","clearDepth","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","$sendattribute","$value","attributelocation","vertexAttribPointer","enableVertexAttribArray","$senduniform","uniformtype","uniform3fv","uniform1i","uniformMatrix4fv","uniform1f","getExtension","loseContext","getContext","enable","DEPTH_TEST","CULL_FACE","cullFace","FRONT","useProgram","matrixcamera","position","index","drawElements","TRIANGLES","UNSIGNED_INT","matrixdepth","activeTexture","TEXTURE0","normal","SystemScript","SystemSpatialization","$listener","$map","$panneroptions","undefined","close","AudioContext","listener","panner","PannerNode","setPosition","track","createMediaElementSource","connect","destination","find","entity","$index","disconnect","translationx","translationy","translationz","cameramatrix","orientationx","orientationy","orientationz","setOrientation","stategame","ScriptBrick1x1x1","$tocolor","$colorized","$model","$delay","random","mountain","tree","temple","gray","gameobjectbrick1x1x1","brick1x1x1","meshbrick1x1x1","gameobjectbrick1x1x1traversable","brick1x1x1traversable","meshbrick1x1x1traversable","gameobjectbrick2x2x2","brick2x2x2","meshbrick2x2x2","gameobjectplane4x4","plane4x4","meshplane4x4","gameobjectplane16x16","plane16x16","meshplane16x16","gameobjectplane32x32","plane32x32","meshplane32x32","gameobjectplane1080x1080","plane1080x1080","meshplane1080x1080","ScriptSoundAmbiant","play","loop","gameobjectsoundambiant","soundambiant","meshsoundambiant","materialmeshsoundambiant","Audio","stateplayer","ScriptPlayer","$inputs","$rotation","$rotationcamera","$timelightning","$locked","$initializeinputs","code","requestPointerLock","movementX","sign","movementY","buttons","jumping","jumpcooldown","pertick","sky","speed","forward","jump","wb","uvx","uvy","uvz","uuvx","uuvy","uuvz","a","b","c","parseFloat","toFixed","currentrotation","ysqr","t0","t1","t2","t3","t4","atan2","asin","currentrotationx","ScriptCoreMountain","pause","gameobjectcoremountain","coremountain","meshcoremountain","materialmeshcoremountain","ScriptCoreTemple","gameobjectcoretemple","coretemple","meshcoretemple","materialmeshcoretemple","ScriptCoreTree","gameobjectcoretree","coretree","meshcoretree","materialmeshcoretree","ScriptCoreEnd","getElementById","display","body","removeChild","resources","innerText","gameobjectcoreend","coreend","meshcoreend","materialmeshcoreend","Game","$resizeobserver","ResizeObserver","observe","mapping","$gameobject","model","factorygameobject","gameobject","nodeplayer","player","meshplayer","materialmeshplayer","pick","colorambiant","colorskybox","container","__webpack_modules__"],"sourceRoot":""}